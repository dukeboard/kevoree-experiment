/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.portSubjectsBinded
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.portSubjectsBinded
 */
public class PatternBuilderForportSubjectsBinded implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.portSubjectsBinded".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.portSubjectsBinded");
		
		final Address<? extends Receiver> var_211 = buildable.patternCollector("enforcementInfo.portSubjectsBinded");
		final Stub<Address<? extends Supplier>> var_212 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_213 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_214 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_213);
		final TupleMask var_215 = new TupleMask(new int[] {}, 0);
		final TupleMask var_216 = new TupleMask(new int[] {}, 2);
		final TupleMask var_217 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_218 = buildable.buildBetaNode(var_212, var_214, var_215, var_216, var_217, false);
		final Stub<Address<? extends Supplier>> var_219 = buildable.buildInjectivityChecker(var_218, 0, new int[] {1});
		final AbstractEvaluator var_220 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_221 = buildable.buildPredicateChecker(var_220, null, new int[] {1}, var_219);
		final Object var_222 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_223 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_222);
		final TupleMask var_224 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_225 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_226 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_227 = buildable.buildBetaNode(var_221, var_223, var_224, var_225, var_226, false);
		final Stub<Address<? extends Supplier>> var_228 = buildable.buildInjectivityChecker(var_227, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_229 = buildable.buildInjectivityChecker(var_228, 2, new int[] {1});
		final Object var_230 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_231 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "P"}), var_230);
		final TupleMask var_232 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_233 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_234 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_235 = buildable.buildBetaNode(var_229, var_231, var_232, var_233, var_234, false);
		final Stub<Address<? extends Supplier>> var_236 = buildable.buildInjectivityChecker(var_235, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_237 = buildable.buildInjectivityChecker(var_236, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_238 = buildable.buildInjectivityChecker(var_237, 3, new int[] {1});
		final Object var_239 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_240 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "P"}), var_239);
		final TupleMask var_241 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_242 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_243 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_244 = buildable.buildBetaNode(var_238, var_240, var_241, var_242, var_243, false);
		final Stub<Address<? extends Supplier>> var_245 = buildable.buildInjectivityChecker(var_244, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_246 = buildable.buildInjectivityChecker(var_245, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_247 = buildable.buildInjectivityChecker(var_246, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_248 = buildable.buildInjectivityChecker(var_247, 4, new int[] {1});
		final Object var_249 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_250 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "CHA"}), var_249);
		final TupleMask var_251 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_252 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_253 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_254 = buildable.buildBetaNode(var_248, var_250, var_251, var_252, var_253, false);
		final Stub<Address<? extends Supplier>> var_255 = buildable.buildInjectivityChecker(var_254, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_256 = buildable.buildInjectivityChecker(var_255, 2, new int[] {5});
		final Stub<Address<? extends Supplier>> var_257 = buildable.buildInjectivityChecker(var_256, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_258 = buildable.buildInjectivityChecker(var_257, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_259 = buildable.buildInjectivityChecker(var_258, 5, new int[] {1});
		final TupleMask var_260 = new TupleMask(new int[] {2, 3, 4}, 6);
		final Stub<Address<? extends Supplier>> var_261 = buildable.buildTrimmer(var_259, var_260);
		buildable.buildConnection(var_261, var_211);
		return var_211;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.portSubjectsBinded".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);
			posMapping.put("P", 1);
			posMapping.put("B", 2);

		}
		return posMapping;
	}
}
