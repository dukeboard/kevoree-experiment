/*******************************************************************************
 * Pattern builder for pattern policy.userRoleRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.userRoleRule
 */
public class PatternBuilderForuserRoleRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.userRoleRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.userRoleRule");
		
		final Address<? extends Receiver> var_750 = buildable.patternCollector("policy.userRoleRule");
		final Stub<Address<? extends Supplier>> var_751 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_752 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_753 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_752);
		final TupleMask var_754 = new TupleMask(new int[] {}, 0);
		final TupleMask var_755 = new TupleMask(new int[] {}, 2);
		final TupleMask var_756 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_757 = buildable.buildBetaNode(var_751, var_753, var_754, var_755, var_756, false);
		final Stub<Address<? extends Supplier>> var_758 = buildable.buildInjectivityChecker(var_757, 1, new int[] {0});
		final Object var_759 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_760 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_759);
		final TupleMask var_761 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_762 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_763 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_764 = buildable.buildBetaNode(var_758, var_760, var_761, var_762, var_763, false);
		final Stub<Address<? extends Supplier>> var_765 = buildable.buildInjectivityChecker(var_764, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_766 = buildable.buildInjectivityChecker(var_765, 2, new int[] {0});
		final Object var_767 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_768 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_767);
		final TupleMask var_769 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_770 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_771 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_772 = buildable.buildBetaNode(var_766, var_768, var_769, var_770, var_771, false);
		final Stub<Address<? extends Supplier>> var_773 = buildable.buildInjectivityChecker(var_772, 3, new int[] {2});
		final Stub<Address<? extends Supplier>> var_774 = buildable.buildInjectivityChecker(var_773, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_775 = buildable.buildInjectivityChecker(var_774, 3, new int[] {0});
		final Object var_776 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_777 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_776);
		final TupleMask var_778 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_779 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_780 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_781 = buildable.buildBetaNode(var_775, var_777, var_778, var_779, var_780, false);
		final Stub<Address<? extends Supplier>> var_782 = buildable.buildInjectivityChecker(var_781, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_783 = buildable.buildInjectivityChecker(var_782, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_784 = buildable.buildInjectivityChecker(var_783, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_785 = buildable.buildInjectivityChecker(var_784, 4, new int[] {0});
		final TupleMask var_786 = new TupleMask(new int[] {0, 1, 3, 4}, 5);
		final Stub<Address<? extends Supplier>> var_787 = buildable.buildTrimmer(var_785, var_786);
		buildable.buildConnection(var_787, var_750);
		return var_750;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.userRoleRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("ROLE", 1);
			posMapping.put("OPERATION", 2);
			posMapping.put("OBJECT", 3);

		}
		return posMapping;
	}
}
