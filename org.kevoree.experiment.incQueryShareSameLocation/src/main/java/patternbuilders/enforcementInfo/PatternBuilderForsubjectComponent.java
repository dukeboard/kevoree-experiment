/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.subjectComponent
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.subjectComponent
 */
public class PatternBuilderForsubjectComponent implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.subjectComponent".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.subjectComponent");
		
		final Address<? extends Receiver> var_0 = buildable.patternCollector("enforcementInfo.subjectComponent");
		final Stub<Address<? extends Supplier>> var_1 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_2 = EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance");
		final Stub<Address<? extends Supplier>> var_3 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"C"}), var_2);
		final TupleMask var_4 = new TupleMask(new int[] {}, 0);
		final TupleMask var_5 = new TupleMask(new int[] {}, 1);
		final TupleMask var_6 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_7 = buildable.buildBetaNode(var_1, var_3, var_4, var_5, var_6, false);
		final Object var_8 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_9 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_8);
		final TupleMask var_10 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_11 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_12 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_13 = buildable.buildBetaNode(var_7, var_9, var_10, var_11, var_12, false);
		final Stub<Address<? extends Supplier>> var_14 = buildable.buildInjectivityChecker(var_13, 0, new int[] {1});
		final Object var_15 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_16 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_15);
		final TupleMask var_17 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_18 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_19 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_20 = buildable.buildBetaNode(var_14, var_16, var_17, var_18, var_19, false);
		final Stub<Address<? extends Supplier>> var_21 = buildable.buildInjectivityChecker(var_20, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_22 = buildable.buildInjectivityChecker(var_21, 1, new int[] {2});
		final AbstractEvaluator var_23 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(2).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_24 = buildable.buildPredicateChecker(var_23, null, new int[] {2}, var_22);
		final TupleMask var_25 = new TupleMask(new int[] {0}, 3);
		final Stub<Address<? extends Supplier>> var_26 = buildable.buildTrimmer(var_24, var_25);
		buildable.buildConnection(var_26, var_0);
		return var_0;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.subjectComponent".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);

		}
		return posMapping;
	}
}
