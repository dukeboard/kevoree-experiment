/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.authorization
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.authorization
 */
public class PatternBuilderForauthorization implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.authorization".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.authorization");
		
		final Address<? extends Receiver> var_10 = buildable.patternCollector("enforcementInfo.authorization");
		final Stub<Address<? extends Supplier>> var_11 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_12 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_13 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEFOBJ", "TYPNAMEOBJ"}), var_12);
		final TupleMask var_14 = new TupleMask(new int[] {}, 0);
		final TupleMask var_15 = new TupleMask(new int[] {}, 2);
		final TupleMask var_16 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_17 = buildable.buildBetaNode(var_11, var_13, var_14, var_15, var_16, false);
		final Stub<Address<? extends Supplier>> var_18 = buildable.buildInjectivityChecker(var_17, 0, new int[] {1});
		final AbstractEvaluator var_19 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBook");
			}
		};
		final Stub<Address<? extends Supplier>> var_20 = buildable.buildPredicateChecker(var_19, null, new int[] {1}, var_18);
		final Object var_21 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_22 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OBJECT", "TYPDEFOBJ"}), var_21);
		final TupleMask var_23 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_24 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_25 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_26 = buildable.buildBetaNode(var_20, var_22, var_23, var_24, var_25, false);
		final Stub<Address<? extends Supplier>> var_27 = buildable.buildInjectivityChecker(var_26, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_28 = buildable.buildInjectivityChecker(var_27, 2, new int[] {1});
		final Object var_29 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("provided");
		final Stub<Address<? extends Supplier>> var_30 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OBJECT", "PORTOBJ"}), var_29);
		final TupleMask var_31 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_32 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_33 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_34 = buildable.buildBetaNode(var_28, var_30, var_31, var_32, var_33, false);
		final Stub<Address<? extends Supplier>> var_35 = buildable.buildInjectivityChecker(var_34, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_36 = buildable.buildInjectivityChecker(var_35, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_37 = buildable.buildInjectivityChecker(var_36, 3, new int[] {1});
		final Object var_38 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_39 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDINGCHAOBJ", "PORTOBJ"}), var_38);
		final TupleMask var_40 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_41 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_42 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_43 = buildable.buildBetaNode(var_37, var_39, var_40, var_41, var_42, false);
		final Stub<Address<? extends Supplier>> var_44 = buildable.buildInjectivityChecker(var_43, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_45 = buildable.buildInjectivityChecker(var_44, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_46 = buildable.buildInjectivityChecker(var_45, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_47 = buildable.buildInjectivityChecker(var_46, 4, new int[] {1});
		final Object var_48 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_49 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDINGCHAOBJ", "CHANNEL"}), var_48);
		final TupleMask var_50 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_51 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_52 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_53 = buildable.buildBetaNode(var_47, var_49, var_50, var_51, var_52, false);
		final Stub<Address<? extends Supplier>> var_54 = buildable.buildInjectivityChecker(var_53, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_55 = buildable.buildInjectivityChecker(var_54, 5, new int[] {2});
		final Stub<Address<? extends Supplier>> var_56 = buildable.buildInjectivityChecker(var_55, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_57 = buildable.buildInjectivityChecker(var_56, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_58 = buildable.buildInjectivityChecker(var_57, 5, new int[] {1});
		final Object var_59 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_60 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDINGSUBCHA", "CHANNEL"}), var_59);
		final TupleMask var_61 = new TupleMask(new int[] {5}, 6);
		final TupleMask var_62 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_63 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_64 = buildable.buildBetaNode(var_58, var_60, var_61, var_62, var_63, false);
		final Stub<Address<? extends Supplier>> var_65 = buildable.buildInjectivityChecker(var_64, 4, new int[] {6});
		final Stub<Address<? extends Supplier>> var_66 = buildable.buildInjectivityChecker(var_65, 6, new int[] {5});
		final Stub<Address<? extends Supplier>> var_67 = buildable.buildInjectivityChecker(var_66, 6, new int[] {2});
		final Stub<Address<? extends Supplier>> var_68 = buildable.buildInjectivityChecker(var_67, 6, new int[] {3});
		final Stub<Address<? extends Supplier>> var_69 = buildable.buildInjectivityChecker(var_68, 6, new int[] {0});
		final Stub<Address<? extends Supplier>> var_70 = buildable.buildInjectivityChecker(var_69, 6, new int[] {1});
		final Object var_71 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_72 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDINGSUBCHA", "PORTSUB"}), var_71);
		final TupleMask var_73 = new TupleMask(new int[] {6}, 7);
		final TupleMask var_74 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_75 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_76 = buildable.buildBetaNode(var_70, var_72, var_73, var_74, var_75, false);
		final Stub<Address<? extends Supplier>> var_77 = buildable.buildInjectivityChecker(var_76, 4, new int[] {7});
		final Stub<Address<? extends Supplier>> var_78 = buildable.buildInjectivityChecker(var_77, 6, new int[] {7});
		final Stub<Address<? extends Supplier>> var_79 = buildable.buildInjectivityChecker(var_78, 5, new int[] {7});
		final Stub<Address<? extends Supplier>> var_80 = buildable.buildInjectivityChecker(var_79, 2, new int[] {7});
		final Stub<Address<? extends Supplier>> var_81 = buildable.buildInjectivityChecker(var_80, 3, new int[] {7});
		final Stub<Address<? extends Supplier>> var_82 = buildable.buildInjectivityChecker(var_81, 7, new int[] {0});
		final Stub<Address<? extends Supplier>> var_83 = buildable.buildInjectivityChecker(var_82, 7, new int[] {1});
		final Object var_84 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_85 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"SUBJECT", "PORTSUB"}), var_84);
		final TupleMask var_86 = new TupleMask(new int[] {7}, 8);
		final TupleMask var_87 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_88 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_89 = buildable.buildBetaNode(var_83, var_85, var_86, var_87, var_88, false);
		final Stub<Address<? extends Supplier>> var_90 = buildable.buildInjectivityChecker(var_89, 4, new int[] {8});
		final Stub<Address<? extends Supplier>> var_91 = buildable.buildInjectivityChecker(var_90, 6, new int[] {8});
		final Stub<Address<? extends Supplier>> var_92 = buildable.buildInjectivityChecker(var_91, 5, new int[] {8});
		final Stub<Address<? extends Supplier>> var_93 = buildable.buildInjectivityChecker(var_92, 2, new int[] {8});
		final Stub<Address<? extends Supplier>> var_94 = buildable.buildInjectivityChecker(var_93, 3, new int[] {8});
		final Stub<Address<? extends Supplier>> var_95 = buildable.buildInjectivityChecker(var_94, 7, new int[] {8});
		final Stub<Address<? extends Supplier>> var_96 = buildable.buildInjectivityChecker(var_95, 8, new int[] {0});
		final Stub<Address<? extends Supplier>> var_97 = buildable.buildInjectivityChecker(var_96, 8, new int[] {1});
		final Object var_98 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_99 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"SUBJECT", "TYPDEFSUB"}), var_98);
		final TupleMask var_100 = new TupleMask(new int[] {8}, 9);
		final TupleMask var_101 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_102 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_103 = buildable.buildBetaNode(var_97, var_99, var_100, var_101, var_102, false);
		final Stub<Address<? extends Supplier>> var_104 = buildable.buildInjectivityChecker(var_103, 4, new int[] {9});
		final Stub<Address<? extends Supplier>> var_105 = buildable.buildInjectivityChecker(var_104, 6, new int[] {9});
		final Stub<Address<? extends Supplier>> var_106 = buildable.buildInjectivityChecker(var_105, 5, new int[] {9});
		final Stub<Address<? extends Supplier>> var_107 = buildable.buildInjectivityChecker(var_106, 2, new int[] {9});
		final Stub<Address<? extends Supplier>> var_108 = buildable.buildInjectivityChecker(var_107, 3, new int[] {9});
		final Stub<Address<? extends Supplier>> var_109 = buildable.buildInjectivityChecker(var_108, 7, new int[] {9});
		final Stub<Address<? extends Supplier>> var_110 = buildable.buildInjectivityChecker(var_109, 8, new int[] {9});
		final Stub<Address<? extends Supplier>> var_111 = buildable.buildInjectivityChecker(var_110, 0, new int[] {9});
		final Stub<Address<? extends Supplier>> var_112 = buildable.buildInjectivityChecker(var_111, 9, new int[] {1});
		final Object var_113 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_114 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEFSUB", "TYPNAMESUB"}), var_113);
		final TupleMask var_115 = new TupleMask(new int[] {9}, 10);
		final TupleMask var_116 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_117 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_118 = buildable.buildBetaNode(var_112, var_114, var_115, var_116, var_117, false);
		final Stub<Address<? extends Supplier>> var_119 = buildable.buildInjectivityChecker(var_118, 4, new int[] {10});
		final Stub<Address<? extends Supplier>> var_120 = buildable.buildInjectivityChecker(var_119, 6, new int[] {10});
		final Stub<Address<? extends Supplier>> var_121 = buildable.buildInjectivityChecker(var_120, 5, new int[] {10});
		final Stub<Address<? extends Supplier>> var_122 = buildable.buildInjectivityChecker(var_121, 2, new int[] {10});
		final Stub<Address<? extends Supplier>> var_123 = buildable.buildInjectivityChecker(var_122, 3, new int[] {10});
		final Stub<Address<? extends Supplier>> var_124 = buildable.buildInjectivityChecker(var_123, 7, new int[] {10});
		final Stub<Address<? extends Supplier>> var_125 = buildable.buildInjectivityChecker(var_124, 8, new int[] {10});
		final Stub<Address<? extends Supplier>> var_126 = buildable.buildInjectivityChecker(var_125, 0, new int[] {10});
		final Stub<Address<? extends Supplier>> var_127 = buildable.buildInjectivityChecker(var_126, 9, new int[] {10});
		final Stub<Address<? extends Supplier>> var_128 = buildable.buildInjectivityChecker(var_127, 1, new int[] {10});
		final AbstractEvaluator var_129 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(10).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_130 = buildable.buildPredicateChecker(var_129, null, new int[] {10}, var_128);
		final TupleMask var_131 = new TupleMask(new int[] {8, 5, 2, 7, 3, 6, 4}, 11);
		final Stub<Address<? extends Supplier>> var_132 = buildable.buildTrimmer(var_130, var_131);
		buildable.buildConnection(var_132, var_10);
		return var_10;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.authorization".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("SUBJECT", 0);
			posMapping.put("CHANNEL", 1);
			posMapping.put("OBJECT", 2);
			posMapping.put("PORTSUB", 3);
			posMapping.put("PORTOBJ", 4);
			posMapping.put("BINDINGSUBCHA", 5);
			posMapping.put("BINDINGCHAOBJ", 6);

		}
		return posMapping;
	}
}
