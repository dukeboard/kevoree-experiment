/*******************************************************************************
 * Pattern builder for pattern nodeInfo.nodeObject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.nodeInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern nodeInfo.nodeObject
 */
public class PatternBuilderFornodeObject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("nodeInfo.nodeObject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("nodeInfo.nodeObject");
		
		final Address<? extends Receiver> var_289 = buildable.patternCollector("nodeInfo.nodeObject");
		final Stub<Address<? extends Supplier>> var_290 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_291 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_292 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_291);
		final TupleMask var_293 = new TupleMask(new int[] {}, 0);
		final TupleMask var_294 = new TupleMask(new int[] {}, 2);
		final TupleMask var_295 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_296 = buildable.buildBetaNode(var_290, var_292, var_293, var_294, var_295, false);
		final Stub<Address<? extends Supplier>> var_297 = buildable.buildInjectivityChecker(var_296, 0, new int[] {1});
		final AbstractEvaluator var_298 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBook");
			}
		};
		final Stub<Address<? extends Supplier>> var_299 = buildable.buildPredicateChecker(var_298, null, new int[] {1}, var_297);
		final Object var_300 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_301 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_300);
		final TupleMask var_302 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_303 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_304 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_305 = buildable.buildBetaNode(var_299, var_301, var_302, var_303, var_304, false);
		final Stub<Address<? extends Supplier>> var_306 = buildable.buildInjectivityChecker(var_305, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_307 = buildable.buildInjectivityChecker(var_306, 2, new int[] {1});
		final Object var_308 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_309 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_308);
		final TupleMask var_310 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_311 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_312 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_313 = buildable.buildBetaNode(var_307, var_309, var_310, var_311, var_312, false);
		final Stub<Address<? extends Supplier>> var_314 = buildable.buildInjectivityChecker(var_313, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_315 = buildable.buildInjectivityChecker(var_314, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_316 = buildable.buildInjectivityChecker(var_315, 3, new int[] {1});
		final TupleMask var_317 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_318 = buildable.buildTrimmer(var_316, var_317);
		buildable.buildConnection(var_318, var_289);
		return var_289;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("nodeInfo.nodeObject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
