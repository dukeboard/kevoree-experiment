/*******************************************************************************
 * Pattern builder for pattern lrbac.RolePermissionAssignment
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.lrbac;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern lrbac.RolePermissionAssignment
 */
public class PatternBuilderForRolePermissionAssignment implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("lrbac.RolePermissionAssignment".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("lrbac.RolePermissionAssignment");
		
		final Address<? extends Receiver> var_88 = buildable.patternCollector("lrbac.RolePermissionAssignment");
		final Stub<Address<? extends Supplier>> var_89 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_90 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_91 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERM"}), var_90);
		final TupleMask var_92 = new TupleMask(new int[] {}, 0);
		final TupleMask var_93 = new TupleMask(new int[] {}, 2);
		final TupleMask var_94 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_95 = buildable.buildBetaNode(var_89, var_91, var_92, var_93, var_94, false);
		final Stub<Address<? extends Supplier>> var_96 = buildable.buildInjectivityChecker(var_95, 1, new int[] {0});
		final TupleMask var_97 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_98 = buildable.buildTrimmer(var_96, var_97);
		buildable.buildConnection(var_98, var_88);
		return var_88;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("lrbac.RolePermissionAssignment".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("ROLE", 0);
			posMapping.put("PERM", 1);

		}
		return posMapping;
	}
}
