/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.subjectComponent
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.subjectComponent
 */
public class PatternBuilderForsubjectComponent implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.subjectComponent".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.subjectComponent");
		
		final Address<? extends Receiver> var_262 = buildable.patternCollector("enforcementInfo.subjectComponent");
		final Stub<Address<? extends Supplier>> var_263 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_264 = EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance");
		final Stub<Address<? extends Supplier>> var_265 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"C"}), var_264);
		final TupleMask var_266 = new TupleMask(new int[] {}, 0);
		final TupleMask var_267 = new TupleMask(new int[] {}, 1);
		final TupleMask var_268 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_269 = buildable.buildBetaNode(var_263, var_265, var_266, var_267, var_268, false);
		final Object var_270 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_271 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_270);
		final TupleMask var_272 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_273 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_274 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_275 = buildable.buildBetaNode(var_269, var_271, var_272, var_273, var_274, false);
		final Stub<Address<? extends Supplier>> var_276 = buildable.buildInjectivityChecker(var_275, 0, new int[] {1});
		final Object var_277 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_278 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_277);
		final TupleMask var_279 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_280 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_281 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_282 = buildable.buildBetaNode(var_276, var_278, var_279, var_280, var_281, false);
		final Stub<Address<? extends Supplier>> var_283 = buildable.buildInjectivityChecker(var_282, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_284 = buildable.buildInjectivityChecker(var_283, 1, new int[] {2});
		final AbstractEvaluator var_285 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(2).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_286 = buildable.buildPredicateChecker(var_285, null, new int[] {2}, var_284);
		final TupleMask var_287 = new TupleMask(new int[] {0}, 3);
		final Stub<Address<? extends Supplier>> var_288 = buildable.buildTrimmer(var_286, var_287);
		buildable.buildConnection(var_288, var_262);
		return var_262;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.subjectComponent".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);

		}
		return posMapping;
	}
}
