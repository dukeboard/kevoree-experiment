/*******************************************************************************
 * Pattern builder for pattern policyInfo.userFullRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policyInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policyInfo.userFullRule
 */
public class PatternBuilderForuserFullRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policyInfo.userFullRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policyInfo.userFullRule");
		
		final Address<? extends Receiver> var_420 = buildable.patternCollector("policyInfo.userFullRule");
		final Stub<Address<? extends Supplier>> var_421 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_422 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_423 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_422);
		final TupleMask var_424 = new TupleMask(new int[] {}, 0);
		final TupleMask var_425 = new TupleMask(new int[] {}, 2);
		final TupleMask var_426 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_427 = buildable.buildBetaNode(var_421, var_423, var_424, var_425, var_426, false);
		final Stub<Address<? extends Supplier>> var_428 = buildable.buildInjectivityChecker(var_427, 1, new int[] {0});
		final Object var_429 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("User"))).getEStructuralFeature("assignedRoles");
		final Stub<Address<? extends Supplier>> var_430 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_429);
		final TupleMask var_431 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_432 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_433 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_434 = buildable.buildBetaNode(var_428, var_430, var_431, var_432, var_433, false);
		final Stub<Address<? extends Supplier>> var_435 = buildable.buildInjectivityChecker(var_434, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_436 = buildable.buildInjectivityChecker(var_435, 0, new int[] {2});
		final Object var_437 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_438 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_437);
		final TupleMask var_439 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_440 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_441 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_442 = buildable.buildBetaNode(var_436, var_438, var_439, var_440, var_441, false);
		final Stub<Address<? extends Supplier>> var_443 = buildable.buildInjectivityChecker(var_442, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_444 = buildable.buildInjectivityChecker(var_443, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_445 = buildable.buildInjectivityChecker(var_444, 3, new int[] {2});
		final Object var_446 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Operation"))).getEStructuralFeature("resources");
		final Stub<Address<? extends Supplier>> var_447 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_446);
		final TupleMask var_448 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_449 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_450 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_451 = buildable.buildBetaNode(var_445, var_447, var_448, var_449, var_450, false);
		final Stub<Address<? extends Supplier>> var_452 = buildable.buildInjectivityChecker(var_451, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_453 = buildable.buildInjectivityChecker(var_452, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_454 = buildable.buildInjectivityChecker(var_453, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_455 = buildable.buildInjectivityChecker(var_454, 4, new int[] {2});
		final TupleMask var_456 = new TupleMask(new int[] {2, 0, 1, 3, 4}, 5);
		final Stub<Address<? extends Supplier>> var_457 = buildable.buildTrimmer(var_455, var_456);
		buildable.buildConnection(var_457, var_420);
		return var_420;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policyInfo.userFullRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("ROLE", 1);
			posMapping.put("PERMISSION", 2);
			posMapping.put("OPERATION", 3);
			posMapping.put("OBJECT", 4);

		}
		return posMapping;
	}
}
