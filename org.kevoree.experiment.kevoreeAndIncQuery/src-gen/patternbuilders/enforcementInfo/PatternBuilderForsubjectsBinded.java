/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.subjectsBinded
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.subjectsBinded
 */
public class PatternBuilderForsubjectsBinded implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.subjectsBinded".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.subjectsBinded");
		
		final Address<? extends Receiver> var_488 = buildable.patternCollector("enforcementInfo.subjectsBinded");
		final Stub<Address<? extends Supplier>> var_489 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_490 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_491 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_490);
		final TupleMask var_492 = new TupleMask(new int[] {}, 0);
		final TupleMask var_493 = new TupleMask(new int[] {}, 2);
		final TupleMask var_494 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_495 = buildable.buildBetaNode(var_489, var_491, var_492, var_493, var_494, false);
		final Stub<Address<? extends Supplier>> var_496 = buildable.buildInjectivityChecker(var_495, 0, new int[] {1});
		final AbstractEvaluator var_497 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_498 = buildable.buildPredicateChecker(var_497, null, new int[] {1}, var_496);
		final Object var_499 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_500 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_499);
		final TupleMask var_501 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_502 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_503 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_504 = buildable.buildBetaNode(var_498, var_500, var_501, var_502, var_503, false);
		final Stub<Address<? extends Supplier>> var_505 = buildable.buildInjectivityChecker(var_504, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_506 = buildable.buildInjectivityChecker(var_505, 2, new int[] {1});
		final Object var_507 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_508 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "P"}), var_507);
		final TupleMask var_509 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_510 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_511 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_512 = buildable.buildBetaNode(var_506, var_508, var_509, var_510, var_511, false);
		final Stub<Address<? extends Supplier>> var_513 = buildable.buildInjectivityChecker(var_512, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_514 = buildable.buildInjectivityChecker(var_513, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_515 = buildable.buildInjectivityChecker(var_514, 3, new int[] {1});
		final Object var_516 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_517 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "P"}), var_516);
		final TupleMask var_518 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_519 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_520 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_521 = buildable.buildBetaNode(var_515, var_517, var_518, var_519, var_520, false);
		final Stub<Address<? extends Supplier>> var_522 = buildable.buildInjectivityChecker(var_521, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_523 = buildable.buildInjectivityChecker(var_522, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_524 = buildable.buildInjectivityChecker(var_523, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_525 = buildable.buildInjectivityChecker(var_524, 4, new int[] {1});
		final Object var_526 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_527 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "CHA"}), var_526);
		final TupleMask var_528 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_529 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_530 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_531 = buildable.buildBetaNode(var_525, var_527, var_528, var_529, var_530, false);
		final Stub<Address<? extends Supplier>> var_532 = buildable.buildInjectivityChecker(var_531, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_533 = buildable.buildInjectivityChecker(var_532, 2, new int[] {5});
		final Stub<Address<? extends Supplier>> var_534 = buildable.buildInjectivityChecker(var_533, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_535 = buildable.buildInjectivityChecker(var_534, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_536 = buildable.buildInjectivityChecker(var_535, 5, new int[] {1});
		final TupleMask var_537 = new TupleMask(new int[] {2}, 6);
		final Stub<Address<? extends Supplier>> var_538 = buildable.buildTrimmer(var_536, var_537);
		buildable.buildConnection(var_538, var_488);
		return var_488;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.subjectsBinded".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);

		}
		return posMapping;
	}
}
