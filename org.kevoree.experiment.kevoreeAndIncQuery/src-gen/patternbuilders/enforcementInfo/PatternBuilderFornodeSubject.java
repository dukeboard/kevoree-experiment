/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.nodeSubject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.nodeSubject
 */
public class PatternBuilderFornodeSubject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.nodeSubject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.nodeSubject");
		
		final Address<? extends Receiver> var_499 = buildable.patternCollector("enforcementInfo.nodeSubject");
		final Stub<Address<? extends Supplier>> var_500 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_501 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_502 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_501);
		final TupleMask var_503 = new TupleMask(new int[] {}, 0);
		final TupleMask var_504 = new TupleMask(new int[] {}, 2);
		final TupleMask var_505 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_506 = buildable.buildBetaNode(var_500, var_502, var_503, var_504, var_505, false);
		final Stub<Address<? extends Supplier>> var_507 = buildable.buildInjectivityChecker(var_506, 0, new int[] {1});
		final AbstractEvaluator var_508 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_509 = buildable.buildPredicateChecker(var_508, null, new int[] {1}, var_507);
		final Object var_510 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_511 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_510);
		final TupleMask var_512 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_513 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_514 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_515 = buildable.buildBetaNode(var_509, var_511, var_512, var_513, var_514, false);
		final Stub<Address<? extends Supplier>> var_516 = buildable.buildInjectivityChecker(var_515, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_517 = buildable.buildInjectivityChecker(var_516, 2, new int[] {1});
		final Object var_518 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_519 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_518);
		final TupleMask var_520 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_521 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_522 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_523 = buildable.buildBetaNode(var_517, var_519, var_520, var_521, var_522, false);
		final Stub<Address<? extends Supplier>> var_524 = buildable.buildInjectivityChecker(var_523, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_525 = buildable.buildInjectivityChecker(var_524, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_526 = buildable.buildInjectivityChecker(var_525, 3, new int[] {1});
		final TupleMask var_527 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_528 = buildable.buildTrimmer(var_526, var_527);
		buildable.buildConnection(var_528, var_499);
		return var_499;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.nodeSubject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
