/*******************************************************************************
 * Pattern builder for pattern policyInfo.userOperation
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policyInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policyInfo.userOperation
 */
public class PatternBuilderForuserOperation implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policyInfo.userOperation".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policyInfo.userOperation");
		
		final Address<? extends Receiver> var_270 = buildable.patternCollector("policyInfo.userOperation");
		final Stub<Address<? extends Supplier>> var_271 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_272 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("PolicyElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_273 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OPERATIONNAME"}), var_272);
		final TupleMask var_274 = new TupleMask(new int[] {}, 0);
		final TupleMask var_275 = new TupleMask(new int[] {}, 2);
		final TupleMask var_276 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_277 = buildable.buildBetaNode(var_271, var_273, var_274, var_275, var_276, false);
		final Stub<Address<? extends Supplier>> var_278 = buildable.buildInjectivityChecker(var_277, 0, new int[] {1});
		final Object var_279 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_280 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_279);
		final TupleMask var_281 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_282 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_283 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_284 = buildable.buildBetaNode(var_278, var_280, var_281, var_282, var_283, false);
		final Stub<Address<? extends Supplier>> var_285 = buildable.buildInjectivityChecker(var_284, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_286 = buildable.buildInjectivityChecker(var_285, 1, new int[] {2});
		final Object var_287 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_288 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_287);
		final TupleMask var_289 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_290 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_291 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_292 = buildable.buildBetaNode(var_286, var_288, var_289, var_290, var_291, false);
		final Stub<Address<? extends Supplier>> var_293 = buildable.buildInjectivityChecker(var_292, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_294 = buildable.buildInjectivityChecker(var_293, 1, new int[] {3});
		final Stub<Address<? extends Supplier>> var_295 = buildable.buildInjectivityChecker(var_294, 2, new int[] {3});
		final Object var_296 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("User"))).getEStructuralFeature("assignedRoles");
		final Stub<Address<? extends Supplier>> var_297 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_296);
		final TupleMask var_298 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_299 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_300 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_301 = buildable.buildBetaNode(var_295, var_297, var_298, var_299, var_300, false);
		final Stub<Address<? extends Supplier>> var_302 = buildable.buildInjectivityChecker(var_301, 0, new int[] {4});
		final Stub<Address<? extends Supplier>> var_303 = buildable.buildInjectivityChecker(var_302, 1, new int[] {4});
		final Stub<Address<? extends Supplier>> var_304 = buildable.buildInjectivityChecker(var_303, 2, new int[] {4});
		final Stub<Address<? extends Supplier>> var_305 = buildable.buildInjectivityChecker(var_304, 3, new int[] {4});
		final TupleMask var_306 = new TupleMask(new int[] {4, 1}, 5);
		final Stub<Address<? extends Supplier>> var_307 = buildable.buildTrimmer(var_305, var_306);
		buildable.buildConnection(var_307, var_270);
		return var_270;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policyInfo.userOperation".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATIONNAME", 1);

		}
		return posMapping;
	}
}
