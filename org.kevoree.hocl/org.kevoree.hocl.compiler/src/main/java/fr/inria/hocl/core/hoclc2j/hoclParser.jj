/**
 *  HOCL Grammar 
 *
 *
 * The Java 1.5 grammar part is borrowed from Sun
 * Copyright ? 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.
 */
 
options {
  JAVA_UNICODE_ESCAPE = true;
 // ERROR_REPORTING = false;
  STATIC = false;
  JDK_VERSION = "1.5";
  OUTPUT_DIRECTORY = ".";
}



PARSER_BEGIN(HoclParser)

package hoclc2j;


/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class HoclParser {
   /**
    * Class to hold modifiers.
    */
   static public final class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     public static final int PUBLIC = 0x0001;
     public static final int PROTECTED = 0x0002;
     public static final int PRIVATE = 0x0004;
     public static final int ABSTRACT = 0x0008;
     public static final int STATIC = 0x0010;
     public static final int FINAL = 0x0020;
     public static final int SYNCHRONIZED = 0x0040;
     public static final int NATIVE = 0x0080;
     public static final int TRANSIENT = 0x0100;
     public static final int VOLATILE = 0x0200;
     public static final int STRICTFP = 0x1000;

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers)
     {
       return (modifiers & PUBLIC) != 0;
     }

     public boolean isProtected(int modifiers)
     {
       return (modifiers & PROTECTED) != 0;
     }

     public boolean isPrivate(int modifiers)
     {
       return (modifiers & PRIVATE) != 0;
     }

     public boolean isStatic(int modifiers)
     {
       return (modifiers & STATIC) != 0;
     }

     public boolean isAbstract(int modifiers)
     {
       return (modifiers & ABSTRACT) != 0;
     }

     public boolean isFinal(int modifiers)
     {
       return (modifiers & FINAL) != 0;
     }

     public boolean isNative(int modifiers)
     {
       return (modifiers & NATIVE) != 0;
     }

     public boolean isStrictfp(int modifiers)
     {
       return (modifiers & STRICTFP) != 0;
     }

     public boolean isSynchronized(int modifiers)
     {
       return (modifiers & SYNCHRONIZED) != 0;
     }

     public boolean isTransient(int modifiers)
      {
       return (modifiers & TRANSIENT) != 0;
     }

     public boolean isVolatile(int modifiers)
     {
       return (modifiers & VOLATILE) != 0;
     }

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   } // class ModifierSet

} // class HoclParser


PARSER_END(HoclParser)




//************ Tokens for Java 1.5

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


//************ Keywords for HOCL

TOKEN :
{
  < REPLACE: "replace" >
| < BY: "by" >
| < REPLACE_ONE: "replace-one">
| < LET: "let" >
| < IN: "in" >
//| < TUPLE: ":" >  cf COLON
//| < JOKER: "?" >  // define a possibly empty joker cf HOOK
| < ERROR: "ERROR" > // to test erroneous molecule
| < REC: "rec" >
| < TWO_COLONS: "::" >
}


/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "$",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06fa"-"\u06fc",
         "\u0710",
         "\u0712"-"\u072c",
         "\u0780"-"\u07a5",
         "\u0905"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17b3",
         "\u17db",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
/*| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >*/
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
	/*
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
     matchedToken.image = ">";
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     matchedToken.image = ">";
  }
|
*/
  < GT: ">" >
}



Token Lsol() : {Token t;} {t = <LT> {return t;}}
Token Rsol() : {Token t;} {t = <GT> {return t;}}
Token Equals() : {Token t;} {t = <ASSIGN> {return t;}}

/****************************************
 * THE HOCL LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

Program Start() :
{Program prgm;}
{
  prgm = Program(new SymbolsTable())
  <EOF>
        {return prgm;}
}


Program Program(SymbolsTable symbolsTable):
{Solution sol; String decl = new String(), decl2;}
{
  [
  	decl = PackageDeclaration()       // cf Java Grammar
  ]
  (
  	decl2 = ImportDeclaration()       {decl = decl + "\n" + decl2;}  // cf Java Grammar
  )*
  	sol = LetSolution(symbolsTable)   {return new Program(sol, decl);}
}


Solution LetSolution(SymbolsTable symbolsTable):
{Token t; boolean isRec = false; Solution sol; ReactionRulePat rulePat; ReactionRule reactRule;}
{
  (
    sol = Solution(symbolsTable)           {return sol;}
 |
    <LET>
    (
      <REC>                                {isRec = true;}
    )?
    t = <IDENTIFIER>                       {rulePat = new ReactionRulePat(t.image, t.image);
    	                                    if(isRec) {
		                              	     symbolsTable.push(rulePat);
		                                    }
                                           }
    Equals()
    reactRule = Abstraction(symbolsTable)  {if(!isRec){
                                        	  symbolsTable.push(rulePat);
                                            }
                                            reactRule.setRuleName(t.image);
                                            rulePat.setReactionRule(reactRule);
                                           }
    <IN>
    sol = LetSolution(symbolsTable)        {symbolsTable.pop();
                                            return new SolutionWithRuleDef(sol, rulePat);}
  )
}


BasicSolution Solution(SymbolsTable symbolsTable):
{Molecule mol; symbolsTable.incrNestLevel();}
{
  Lsol()
  (
   mol = Molecule(symbolsTable)
   Rsol()
                                           {symbolsTable.decrNestLevel();
                                           	return new BasicSolution(mol, symbolsTable.getNestLevel());}
  |
   // empty solution
   Rsol()                                  {symbolsTable.decrNestLevel();
   	                                        return new BasicSolution(new BasicMolecule(symbolsTable.getNestLevel(), symbolsTable), symbolsTable.getNestLevel());}
  )
}


Molecule Molecule(SymbolsTable symbolsTable):
{Atom atom; BasicMolecule mol = new BasicMolecule(symbolsTable.getNestLevel(), symbolsTable); Molecule molecule;}
{
 (
   atom = Atom(symbolsTable)               {mol.addLast(atom);}
   (
     LOOKAHEAD(2)
     <COMMA>
     atom = Atom(symbolsTable)             {mol.addLast(atom);}
   )*
                                           {return mol;}
 |
   molecule = LetReactionRule(symbolsTable)           {return molecule;}
 )
}


Atom Atom(SymbolsTable symbolsTable):
{boolean isTuple = false; Atom atom, atom2; Tuple tuple = null;}
{
   atom = Expression(symbolsTable)
   (
     LOOKAHEAD(2)
     <COLON>
     atom2 = Expression(symbolsTable)      {if(!isTuple){
     	                                          isTuple = true;
                                             	  tuple = new Tuple(symbolsTable.getNestLevel());
                                             	  tuple.add(atom);
                                            }
                                            tuple.add(atom2);
                                           }
   )*
                                           {if(tuple == null){
                                              return atom;
                                            } else {
                                              return tuple;
                                            }
                                           }
}


MoleculeWithRuleDef LetReactionRule(SymbolsTable symbolsTable):
{Token t; boolean isRec = false; ReactionRulePat rulePat; Molecule mol; ReactionRule reactRule;}
{
	<LET>
	[
	  <REC>                                {isRec = true;}
	]
	t = <IDENTIFIER>                       {rulePat = new ReactionRulePat(t.image, t.image);
    	                                    if(isRec) {
		                              	     symbolsTable.push(rulePat);
		                                    }
                                           }

	Equals()
	reactRule = Abstraction(symbolsTable)  {if(!isRec){
                                        	  symbolsTable.push(rulePat);
                                            }
                                            reactRule.setRuleName(t.image);
                                            rulePat.setReactionRule(reactRule);
                                           }
	<IN>
	mol = Molecule(symbolsTable)           {symbolsTable.pop();
                                            return new MoleculeWithRuleDef(mol, rulePat);}
}



ReactionRule ReactionRule(SymbolsTable symbolsTable):
{Token t; ReactionRule reactRule; String ruleName = new String();}
{
  (
    t = <IDENTIFIER>                         {ruleName = t.image;}
    Equals()
  )?
  (
     reactRule = Abstraction(symbolsTable)   {reactRule.setRuleName(ruleName);}
/*
   |
     <LPAREN>
     u = Abstraction()
     <RPAREN>
*/
  )
                                             {return reactRule;}
}


ReactionRule Abstraction(SymbolsTable symbolsTable):
{Pattern pat = new Pattern(); symbolsTable.push(pat);
 Molecule mol; Atom cond; ReactionRule reactRule = new ReactionRule(""); symbolsTable.incrNestLevel();}
{
  (
    <REPLACE>                                          {reactRule.setNShot();}
   |
    <REPLACE_ONE>                                      {reactRule.setOneShot();}
  )
  PatternMol(symbolsTable, pat)                        {reactRule.setPattern(pat); reactRule.setSymbolsTable(symbolsTable); symbolsTable.decrNestLevel();}
  <BY>
  mol = Molecule(symbolsTable)                         {reactRule.result = mol;}
  ( 
    LOOKAHEAD(1)        // the "if" belongs to the closest "replace"
    <IF>
    cond = ConditionalOrExpression(symbolsTable)       {reactRule.condition = (External)cond;
                                                        pat.setLastReactionCondition(reactRule.condition);}
  )?
                                                       {symbolsTable.pop();  // pattern descriptor
                                                       	return reactRule;}
}


Pattern PatternMol(SymbolsTable symbolsTable, Pattern pat):
{//Pattern pat = new Pattern(); 
 AtomPattern atomPat; MoleculeVarPat moleculePat;}
{
   (
     atomPat = PatternTuple(symbolsTable)               {pat.addAtomPattern(atomPat);}
    |
     moleculePat = PatternMoleculeVar(symbolsTable)     {pat.addMoleculePattern(moleculePat);}
   ) 
   (
     <COMMA>
     ( 
       atomPat = PatternTuple(symbolsTable)             {pat.addAtomPattern(atomPat);}
      |
       moleculePat = PatternMoleculeVar(symbolsTable)   {pat.addMoleculePattern(moleculePat);}
     )
   )*
                                                        {return pat;}
}


AtomPattern PatternTuple(SymbolsTable symbolsTable):
{boolean firstTime = true; AtomPattern atomPat; TuplePat tuplePat = null; symbolsTable.incrNestLevel();}
{
  atomPat = PatternAtom(symbolsTable)
  (
    <COLON>
                                                     {if(firstTime){
                                                      	tuplePat = new TuplePat(symbolsTable.getNestLevel());
                                                      	tuplePat.add(atomPat);
                                                      	firstTime = false;
                                                      }
                                                     }
    atomPat = PatternAtom(symbolsTable)
                                                     {tuplePat.add(atomPat);}
  )*
                                                     {symbolsTable.decrNestLevel();
                                                      if(tuplePat == null){
                                                      	return atomPat;
                                                      } else {
                                                      	return tuplePat;
                                                      }
                                                     }
}


MoleculeVarPat PatternMoleculeVar(SymbolsTable symbolsTable):
{Token t;}
{
   <HOOK>          // FIXME: replace by nothing
   t = <IDENTIFIER>                                  {return new MoleculeVarPat(t.image);}
}


AtomPattern PatternAtom(SymbolsTable symbolsTable):
{Token t,t2; String javaType; AtomPattern atomPat; Atom atom; Pattern pat = new Pattern(); External ext;}
{
   // tuple between parenthesis
   <LPAREN>   atomPat = PatternTuple(symbolsTable)   <RPAREN>     {return atomPat;}
 |
   // named rule
   LOOKAHEAD(2)
   t = <IDENTIFIER>   Equals()   t2 = <IDENTIFIER>                {return new ReactionRulePat(t.image, t2.image);}
 |
   // sub-solution
   Lsol()   PatternMol(symbolsTable, pat)   Rsol()                {return new SolutionPat(pat, symbolsTable.getNestLevel());}
 |
   // literal (cf Java grammar)
   ext = Literal()                                                {return new LiteralPat(ext, (Pattern)symbolsTable.peek());}
 |
   // external/Java object with Java type
   t = <IDENTIFIER>  <TWO_COLONS>  javaType = Type()              {return new AtomVarPat(t.image, javaType, (Pattern)symbolsTable.peek());}
}




/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 *

void CompilationUnit():
{}
{
  [ LOOKAHEAD( ( Annotation() )* "package" ) PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  ( < "\u001a" > )?
  ( <STUFF_TO_IGNORE: ~[]> )?
  <EOF>
}
 */

String PackageDeclaration(): //SymbolsTable symbolsTable):
{String s, packName;}
{
  s = Modifiers()
  "package"
  //Name()
  packName = PackageName()
  ";"
                    {return (s.length() > 0 ? s : "") + "package " + packName + ";";}
}

String ImportDeclaration():
{String s, packName;}
{
  "import"          {s = "import";}
  [
    "static"        {s = s + " static";}
  ]
  packName = PackageName()  {s = s + " " + packName;}
  [
   "." "*"          {s = s + ".*";}
  ]
  ";"               {s = s + ";";
                     return s;}
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

String Modifiers():
{int modifiers = 0; String s = new String();}
{
 (
  LOOKAHEAD(2)
  (
   "public"            {s = s + " public"; modifiers |= ModifierSet.PUBLIC;}
  |
   "static"            {s = s + " static"; modifiers |= ModifierSet.STATIC;}
  |
   "protected"         {s = s + " protected"; modifiers |= ModifierSet.PROTECTED;}
  |
   "private"           {s = s + " private"; modifiers |= ModifierSet.PRIVATE;}
  |
   "final"             {s = s + " final"; modifiers |= ModifierSet.FINAL;}
  |
   "abstract"          {s = s + " abstract"; modifiers |= ModifierSet.ABSTRACT;}
  |
   "synchronized"      {s = s + " synchronized"; modifiers |= ModifierSet.SYNCHRONIZED;}
  |
   "native"            {s = s + " native"; modifiers |= ModifierSet.NATIVE;}
  |
   "transient"         {s = s + " transient"; modifiers |= ModifierSet.TRANSIENT;}
  |
   "volatile"          {s = s + " volatile"; modifiers |= ModifierSet.VOLATILE;}
  |
   "strictfp"          {s = s + " strictfp"; modifiers |= ModifierSet.STRICTFP;}
//  |
//   Annotation()
  )
 )*
                        {return (s.length() > 0) ? s.substring(1) : "";}
}

/*
 * Declaration syntax follows.
 *
void TypeDeclaration():
{
   int modifiers;
}
{
  ";"
|
  modifiers = Modifiers()
  (
     ClassOrInterfaceDeclaration(modifiers)
   |
     EnumDeclaration(modifiers)
   |
     AnnotationTypeDeclaration(modifiers)
  )
}


void ClassOrInterfaceDeclaration(int modifiers):
{
   boolean isInterface = false;
}
{
  ( "class" | "interface" { isInterface = true; } )
  <IDENTIFIER>
  [ TypeParameters() ]
  [ ExtendsList(isInterface) ]
  [ ImplementsList(isInterface) ]
  ClassOrInterfaceBody(isInterface)
}

void ExtendsList(boolean isInterface):
{
   boolean extendsMoreThanOne = false;
}
{
   "extends" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() { extendsMoreThanOne = true; } )*
   {
      if (extendsMoreThanOne && !isInterface)
         throw new ParseException("A class cannot extend more than one other class");
   }
}

void ImplementsList(boolean isInterface):
{}
{
   "implements" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() )*
   {
      if (isInterface)
         throw new ParseException("An interface cannot implement other interfaces");
   }
}

void EnumDeclaration(int modifiers):
{}
{
  "enum" <IDENTIFIER>
  [ ImplementsList(false) ]
  EnumBody()
}

void EnumBody():
{}
{
   "{"
   [ EnumConstant() ( LOOKAHEAD(2) "," EnumConstant() )* ]
	[ "," ]
   [ ";" ( ClassOrInterfaceBodyDeclaration(false) )* ]
   "}"
}

void EnumConstant():
{}
{
  Modifiers() <IDENTIFIER> [ Arguments() ] [ ClassOrInterfaceBody(false) ]
}

void TypeParameters():
{}
{
   "<" TypeParameter() ( "," TypeParameter() )* ">"
}

void TypeParameter():
{}
{
   <IDENTIFIER> [ TypeBound() ]
}

void TypeBound():
{}
{
   "extends" ClassOrInterfaceType() ( "&" ClassOrInterfaceType() )*
}

void ClassOrInterfaceBody(boolean isInterface):
{}
{
  "{" ( ClassOrInterfaceBodyDeclaration(isInterface) )* "}"
}

void ClassOrInterfaceBodyDeclaration(boolean isInterface):
{
   boolean isNestedInterface = false;
   int modifiers;
}
{
  LOOKAHEAD(2)
  Initializer()
  {
     if (isInterface)
        throw new ParseException("An interface cannot have initializers");
  }
|
  modifiers = Modifiers() // Just get all the modifiers out of the way. If you want to do
              // more checks, pass the modifiers down to the member
  (
      ClassOrInterfaceDeclaration(modifiers)
    |
      EnumDeclaration(modifiers)
    |
      LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
      ConstructorDeclaration()
    |
      LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
      FieldDeclaration(modifiers)
    |
      MethodDeclaration(modifiers)
  )
|
  ";"
}

void FieldDeclaration(int modifiers):
{}
{
  // Modifiers are already matched in the caller
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator():
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId():
{}
{
  <IDENTIFIER> ( "[" "]" )*
}
*/


Atom VariableInitializer(SymbolsTable symbolsTable):
{Atom atom;}
{
   atom = ArrayInitializer(symbolsTable)     {return atom;}
 |
   atom = Expression(symbolsTable)           {return atom;}
}


External ArrayInitializer(SymbolsTable symbolsTable):
{External ext = new External(), ext2; Atom atom;}
{
  "{"                                                      {ext.javaExpression = "{" ;}
  [
    atom = VariableInitializer(symbolsTable)           {Hoclc2j.checkExternal(atom);
    	                                                    ext2 = (External)atom;
    	                                                    ext.javaExpression = ext.javaExpression + ext2.javaExpression;}
    (
      LOOKAHEAD(2)
      ","
      atom = VariableInitializer(symbolsTable)         {Hoclc2j.checkExternal(atom);
    	                                                    ext2 = (External)atom;
      	                                                    ext.javaExpression = ext.javaExpression + ", " + ext2.javaExpression;}
    )*
  ]
  [
    ","                                                    {ext.javaExpression = ext.javaExpression + ",";}
  ]
  "}"                                                      {ext.javaExpression = ext.javaExpression + "}";
                                                            return ext;
                                                           }
}


/*
void MethodDeclaration(int modifiers):
{}
{
  // Modifiers already matched in the caller!
  [ TypeParameters() ]
  ResultType()
  MethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )
}

void MethodDeclarator():
{}
{
  <IDENTIFIER> FormalParameters() ( "[" "]" )*
}

void FormalParameters():
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter():
{}
{
  Modifiers() Type() [ "..." ] VariableDeclaratorId()
}

void ConstructorDeclaration():
{}
{
  [ TypeParameters() ]
  // Modifiers matched in the caller
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation())
         ExplicitConstructorInvocation()
    ]
    ( BlockStatement() )*
  "}"
}

void ExplicitConstructorInvocation():
{}
{
  ( <IDENTIFIER> "." )* [ LOOKAHEAD(2) "this" "." ]
  [ TypeArguments() ] ("this"|"super") Arguments() ";"
}

void Initializer():
{}
{
  [ "static" ] Block()
}
*/

/*
 * Type, name and expression syntax follows.
 */


String Type():
{String u;}
{
   LOOKAHEAD(2)
   u = ReferenceType() {return u;}
 |
   u = PrimitiveType() {return u;}
}


String ReferenceType():
{String u;}
{
   u = PrimitiveType()
   (
     LOOKAHEAD(2)
     "[" "]"              {u = u + "[]";}
   )+
                          {return u;}
 |
   (
     u = ClassOrInterfaceType()
   )
   (
     LOOKAHEAD(2)
     "[" "]"                      {u = u + "[]";}
   )*
                                  {return u;}
}


String ClassOrInterfaceType():
{Token t; String s, u;}
{
  t = <IDENTIFIER>            {s = t.image;}
  [
    LOOKAHEAD(2)
    u = TypeArguments()       {s = s + u;}
  ]
  (
    LOOKAHEAD(2)
    "."
    t = <IDENTIFIER>          {s = s + "." + t.image;}
    [
      LOOKAHEAD(2)
      u = TypeArguments()     {s = s + u;}
    ]
  )*
                              {return s;}
}


String TypeArguments():
{String u,v;}
{
   "<"
   u = TypeArgument()     {u = "<" + u;}
   (
     ","
     v = TypeArgument()   {u = u + ", " + v;}
   )*
   ">"                    {u = u + ">";}
                          {return u;}
}


String TypeArgument():
{String s,u;}
{
   u = ReferenceType()       {return u;}
 |
   "?"                       {s = "?";}
   [
     u = WildcardBounds()    {s = s + u;}
   ]
                             {return s;}
}


String WildcardBounds():
{String u;}
{
   "extends"
   u = ReferenceType()    {u = " extends " + u;}
                          {return u;}
 |
   "super"
   u = ReferenceType()    {u = " super " + u;}
                          {return u;}
}


String PrimitiveType():
{}
{
  "boolean"    {return new String("boolean");}
|
  "char"       {return new String("char");}
|
  "byte"       {return new String("byte");}
|
  "short"      {return new String("short");}
|
  "int"        {return new String("int");}
|
  "long"       {return new String("long");}
|
  "float"      {return new String("float");}
|
  "double"     {return new String("double");}
}


void ResultType():
{}
{
  "void"
|
  Type()
}


Atom Name(SymbolsTable symbolsTable):
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{Token t; Atom atom = null; External ext = new External();}
{
  t = <IDENTIFIER>      {if(!Character.isUpperCase(t.image.charAt(0))){
  	                     	// identifier of a variable does not start by an upper letter (cf Java convention)
  	                       Symbols symbols = symbolsTable.lookUp(t.image);
  	                       if(symbols == null){
  	                         throw new ParseException("Unknown identifier: " + t.image);
  	                       } else {
  	                       	if(symbols instanceof ReactionRulePat){
  	                       		// create the ReactionRulePat object and determine if it is a recursive call
  	                       		atom = new ReactionRuleVar((ReactionRulePat)symbols,
  	                       			symbolsTable.size() > 1 && symbolsTable.get(symbolsTable.size()-2) instanceof ReactionRulePat && ((ReactionRulePat)symbolsTable.get(symbolsTable.size()-2)).varName.equals(((ReactionRulePat)symbols).varName));
  	                       	} else if(symbols instanceof MoleculeVarPat){
  	                       		atom = new MoleculeVar((MoleculeVarPat)symbols);
  	                       	} else if(symbols instanceof AtomVarPat){
  	                       		ext.javaExpression = t.image;
  	                       		//ReactionCondition cond = new ReactionCondition();
  	                       		//cond.javaExpression = "true";
  	                       		//((AtomVarPat)symbols).setReactionCondition(cond);
  	                       		atom = ext;
 	                       		ext.addVar((AtomVarPat)symbols);
  	                       	}
  	                       }
                         } else {
  	                       	ext.javaExpression = t.image;
  	                       	atom = ext;
  	                     }
                        }
  (
    LOOKAHEAD(2)
    "."
    t = <IDENTIFIER>    {ext.javaExpression = ext.javaExpression + "." + t.image;}
  )*
                        {return atom ;}
}


String PackageName():
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{Token t; String packName;}
{
  t = <IDENTIFIER>      {packName = t.image;}
  (
    LOOKAHEAD(2)
    "."
    t = <IDENTIFIER>    {packName = packName + "." + t.image;}
  )*
                        {return packName;}
}


/*
void NameList():
{}
{
  Name() ( "," Name() )*
}
*/

/*
 * Expression syntax follows.
 */


Atom Expression(SymbolsTable symbolsTable):
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{Atom atom; Solution sol; ReactionRule reactRule;}
{
  /*  No assignment: HOCL as a coordination language
  [
    LOOKAHEAD(2)
    AssignmentOperator() Expression()
  ]
  */
   sol = Solution(symbolsTable)                       {return sol;}
 |
   LOOKAHEAD(2)  // "ident" "="  vs.  "ident" "+" 
   reactRule = ReactionRule(symbolsTable)             {return reactRule;}
 | 
   // cf Java grammar: no assignment
   atom = ConditionalExpression(symbolsTable)         {return atom;}
 /*
 |
   molecule = LetReactionRule(symbolsTable)           {return ??;}
 */
}


void AssignmentOperator():
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}


Atom ConditionalExpression(SymbolsTable symbolsTable):
{Atom atom, atom2; External ext, ext2;}
{
  atom = ConditionalOrExpression(symbolsTable)
  [ 
                                            {Hoclc2j.checkExternal(atom);
                                             ext = (External)atom;}
    "?"
    atom2 = Expression(symbolsTable)        {Hoclc2j.checkExternal(atom2);
    	                                     ext2 = (External)atom2;
    	                                     ext.javaExpression = ext.javaExpression + "? " + ext2.javaExpression;
    	                                     ext.addAllVars(ext2);}
    ":"
    atom2 = Expression(symbolsTable)        {Hoclc2j.checkExternal(atom2);
    	                                     ext2 = (External)atom2;
    	                                     ext.javaExpression = ext.javaExpression + " : " + ext2.javaExpression;
    	                                     ext.addAllVars(ext2);}
  ]
                                           {return atom;}
}


Atom ConditionalOrExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = ConditionalAndExpression(symbolsTable)
  (                                                        {Hoclc2j.checkExternal(atom);
    	                                                    External ext = (External)atom;}
    "||"
    atom2 = ConditionalAndExpression(symbolsTable)         {Hoclc2j.checkExternal(atom2);
    	                                                    External ext2 = (External)atom2;
    	                                                    ext.javaExpression = ext.javaExpression + " || " + ext2.javaExpression;
                     	                                    ext.addAllVars(ext2);}
  )*
                                                           {return atom;}
}


Atom ConditionalAndExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = InclusiveOrExpression(symbolsTable)  
  (                                                   {Hoclc2j.checkExternal(atom);
    	                                               External ext = (External)atom;}
    "&&"
   atom2 = InclusiveOrExpression(symbolsTable)        {Hoclc2j.checkExternal(atom2);
    	                                               External ext2 = (External)atom2;
    	                                               ext.javaExpression = ext.javaExpression + " && " + ext2.javaExpression;
    	                                               ext.addAllVars(ext2);}
  )*
                                                      {return atom;}
}


Atom InclusiveOrExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = ExclusiveOrExpression(symbolsTable)
  (                                                   {Hoclc2j.checkExternal(atom);
    	                                               External ext = (External)atom;}
    "|"
    atom2 = ExclusiveOrExpression(symbolsTable)       {Hoclc2j.checkExternal(atom2);
    	                                               External ext2 = (External)atom2;
    	                                               ext.javaExpression = ext.javaExpression + " | " + ext2.javaExpression;
    	                                               ext.addAllVars(ext2);}
  )*
                                                      {return atom;}
}


Atom ExclusiveOrExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = AndExpression(symbolsTable)
  (
                                                 {Hoclc2j.checkExternal(atom);
    	                                          External ext = (External)atom;}
    "^"
    atom2 = AndExpression(symbolsTable)          {Hoclc2j.checkExternal(atom2);
    	                                          External ext2 = (External)atom2;
    	                                          ext.javaExpression = ext.javaExpression + " ^ " + ext2.javaExpression;
    	                                          ext.addAllVars(ext2);}
  )*
                                                 {return atom;}
}


Atom AndExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = EqualityExpression(symbolsTable)
  (                                                   {Hoclc2j.checkExternal(atom);
    	                                               External ext = (External)atom;}
    "&"
    atom2 = EqualityExpression(symbolsTable)          {Hoclc2j.checkExternal(atom2);
    	                                               External ext2 = (External)atom2;
    	                                               ext.javaExpression = ext.javaExpression + " & " + ext2.javaExpression;
    	                                               ext.addAllVars(ext2);}
  )*
                                                      {return atom;}
}


Atom EqualityExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = InstanceOfExpression(symbolsTable)
  (                                                   {Hoclc2j.checkExternal(atom);
    	                                               External ext = (External)atom;}
    (
        "=="                                          {ext.javaExpression = ext.javaExpression + " == ";}
      | "!="                                          {ext.javaExpression = ext.javaExpression + " != ";}
    )
    atom2 = InstanceOfExpression(symbolsTable)        {Hoclc2j.checkExternal(atom2);
    	                                               External ext2 = (External)atom2;
    	                                               ext.javaExpression = ext.javaExpression + ext2.javaExpression;
    	                                               ext.addAllVars(ext2);}
  )*
                                                      {return atom;}
}


Atom InstanceOfExpression(SymbolsTable symbolsTable):
{String u; Atom atom;}
{
  atom = RelationalExpression(symbolsTable)
  [                                                   {Hoclc2j.checkExternal(atom);
    	                                               External ext = (External)atom;}
    "instanceof"
    u = Type()                                        {ext.javaExpression = ext.javaExpression + " instanceof " + u;}
  ]
                                                      {return atom;}
}


Atom RelationalExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
 //  u = ShiftExpression()        // no shifts, conflict with nested solutions eg <3,<5>>,6
  atom = AdditiveExpression(symbolsTable)
  (
   LOOKAHEAD(2)
                                                      {Hoclc2j.checkExternal(atom);
    	                                               External ext = (External)atom;}
    
    (
        "<"                                           {ext.javaExpression = ext.javaExpression + " < ";}
      | ">"                                           {ext.javaExpression = ext.javaExpression + " > ";}
      | "<="                                          {ext.javaExpression = ext.javaExpression + " <= ";}
      | ">="                                          {ext.javaExpression = ext.javaExpression + " >= ";}
    )
 //     u = ShiftExpression()
    atom2 = AdditiveExpression(symbolsTable)          {Hoclc2j.checkExternal(atom2);
    	                                               External ext2 = (External)atom2;
    	                                               ext.javaExpression = ext.javaExpression + ext2.javaExpression;
    	                                               ext.addAllVars(ext2);}
  )*
                                                      {return atom;}
}


/*
String ShiftExpression():
{}
{
  u = AdditiveExpression()
  (
    (
        "<<" 
      | u = RSIGNEDSHIFT()
      | u = RUNSIGNEDSHIFT()
    )
    u = AdditiveExpression()
  )*
}
*/


Atom AdditiveExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = MultiplicativeExpression(symbolsTable)
  (                                                        {Hoclc2j.checkExternal(atom);
    	                                                    External ext = (External)atom;}
    (
        "+"                                                {ext.javaExpression = ext.javaExpression + " + ";}
      | "-"                                                {ext.javaExpression = ext.javaExpression + " - ";}
    )
    atom2 = MultiplicativeExpression(symbolsTable)         {Hoclc2j.checkExternal(atom2);
    	                                                    External ext2 = (External)atom2;
    	                                                    ext.javaExpression = ext.javaExpression + ext2.javaExpression;
    	                                                    ext.addAllVars(ext2);}
  )*
                                                           {return atom;}
}


Atom MultiplicativeExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = UnaryExpression(symbolsTable)
  (                                             {Hoclc2j.checkExternal(atom);
    	                                         External ext = (External)atom;}
    (
        "*"                                      {ext.javaExpression = ext.javaExpression + " * ";}
      | "/"                                      {ext.javaExpression = ext.javaExpression + " / ";}
      | "%"                                      {ext.javaExpression = ext.javaExpression + " % ";}
    )
    atom2 = UnaryExpression(symbolsTable)        {Hoclc2j.checkExternal(atom2);
    	                                          External ext2 = (External)atom2;
    	                                          ext.javaExpression = ext.javaExpression + ext2.javaExpression;
    	                                          ext.addAllVars(ext2);}
  )*
                                                 {return atom;}
}


Atom UnaryExpression(SymbolsTable symbolsTable):
{String s; Atom atom;}
{
  (
      "+"                                                 {s = "+";}
    | "-"                                                 {s = "-";}
  )
  atom = UnaryExpression(symbolsTable)                    {Hoclc2j.checkExternal(atom);
    	                                                   External ext = (External)atom;
    	                                                   ext.javaExpression = s + ext.javaExpression;
  	                                                       return atom;}
|
  atom = PreIncrementExpression(symbolsTable)             {return atom;}
|
  atom = PreDecrementExpression(symbolsTable)             {return atom;}
|
  atom = UnaryExpressionNotPlusMinus(symbolsTable)        {return atom;}
}


Atom PreIncrementExpression(SymbolsTable symbolsTable):
{Atom atom;}
{
  "++"
  atom = PrimaryExpression(symbolsTable)                  {Hoclc2j.checkExternal(atom);
    	                                                   External ext = (External)atom;
    	                                                   ext.javaExpression = "++" + ext.javaExpression;
                                                           return atom;}
}


Atom PreDecrementExpression(SymbolsTable symbolsTable):
{Atom atom;}
{
  "--"
  atom = PrimaryExpression(symbolsTable)                  {Hoclc2j.checkExternal(atom);
    	                                                   External ext = (External)atom;
    	                                                   ext.javaExpression = "--" + ext.javaExpression;
                                                           return atom;}
}


Atom UnaryExpressionNotPlusMinus(SymbolsTable symbolsTable):
{String s; Atom atom;}
{
  (
      "~"                                             {s = "~";}
    | "!"                                             {s = "!";}
  )
  atom = UnaryExpression(symbolsTable)                {Hoclc2j.checkExternal(atom);
    	                                               External ext = (External)atom;
    	                                               ext.javaExpression = s + ext.javaExpression;
  	                                                   return atom;}
|
  LOOKAHEAD( CastLookahead() )
  atom = CastExpression(symbolsTable)                 {return atom;}
|
  atom = PostfixExpression(symbolsTable)              {return atom;}
}


// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead():
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Type() "[")
  "(" Type() "[" "]"
|
  "(" Type() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}


Atom PostfixExpression(SymbolsTable symbolsTable):
{Atom atom; External ext;}
{
  atom = PrimaryExpression(symbolsTable)
  [
      "++"                                       {Hoclc2j.checkExternal(atom);
    	                                          ext = (External)atom;
    	                                          ext.javaExpression = ext.javaExpression + "++";}
    | "--"                                       {Hoclc2j.checkExternal(atom);
    	                                          ext = (External)atom;
    	                                          ext.javaExpression = ext.javaExpression + "--";}
  ]
                                                 {return atom;}
}


Atom CastExpression(SymbolsTable symbolsTable):
{String u; Atom atom;}
{
  LOOKAHEAD("(" PrimitiveType())
  "("
  u = Type()
  ")"
  atom = UnaryExpression(symbolsTable)           {Hoclc2j.checkExternal(atom);
    	                                          External ext = (External)atom;
    	                                          ext.javaExpression = "(" + u + ")" + ext.javaExpression;
                           	                      return atom;}
|
  "("
  u = Type()
  ")"
  atom = UnaryExpressionNotPlusMinus(symbolsTable)         {Hoclc2j.checkExternal(atom);
    	                                                    External ext = (External)atom;
    	                                                    ext.javaExpression = "(" + u + ")" + ext.javaExpression;
                           	                                return atom;}
}


Atom PrimaryExpression(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = PrimaryPrefix(symbolsTable)
  ( 
   LOOKAHEAD(2)
                                                           {Hoclc2j.checkExternal(atom);
    	                                                    External ext = (External)atom;}
    
    atom2 = PrimarySuffix(symbolsTable)                    {Hoclc2j.checkExternal(atom2);
    	                                                    External ext2 = (External)atom2;
    	                                                    ext.javaExpression = ext.javaExpression + ext2.javaExpression;
    	                                                    ext.addAllVars(ext2);}
  )*
                                                           {return atom;}
}


String MemberSelector():
{String u; Token t;}
{
  "."
  u = TypeArguments()
  t = <IDENTIFIER>         {u = "." + u + t.image;}
                           {return u;}
}


Atom PrimaryPrefix(SymbolsTable symbolsTable):
{Atom atom;}
{
  atom = Literal()                                {return atom;}
|
/*
  LOOKAHEAD( ( <IDENTIFIER> "." )* "this" )
  (
    t = <IDENTIFIER>
    "."
  )*
  "this" 
|
  "super"
  "."
  <IDENTIFIER>
|
*/
  "("
  atom = Atom(symbolsTable)
  ")"                                                 {if(atom instanceof External){
  	                                                     External ext = (External)atom;
  	                                                     ext.javaExpression = "(" + ext.javaExpression + ")";
                                                       }
                                                       return atom;}
|
  atom = AllocationExpression(symbolsTable)           {return atom;}
/*
|
  LOOKAHEAD( ResultType() "." "class" )
  u = ResultType()
  "."
  "class"
*/
|
  atom = Name(symbolsTable)                           {return atom;}
}


Atom PrimarySuffix(SymbolsTable symbolsTable):
{String u; Token t; Atom atom; External ext;}
{
/*
  LOOKAHEAD("." "super" ".")
  "." "super"
|
  LOOKAHEAD("." "this")
  "." "this"
|
*/
  LOOKAHEAD(2)
  "."
  atom = AllocationExpression(symbolsTable)           {Hoclc2j.checkExternal(atom);
    	                                               ext = (External)atom;
    	                                               ext.javaExpression  = "." + ext.javaExpression ;
  	                                                   return atom;}
|
  LOOKAHEAD(3)
  u = MemberSelector()                                {ext = new External();
                                                       ext.javaExpression = u;
                                                       return ext;}
|
  "["
  atom = Expression(symbolsTable)                     {Hoclc2j.checkExternal(atom);
    	                                               ext = (External)atom;}
  "]"                                                 
    	                                              {ext.javaExpression  = "[" + ext.javaExpression + "]";
                                                       return atom;}
|
  "."
  t = <IDENTIFIER>                                    {ext = new External();
                                                       ext.javaExpression = "." + t.image;
                                                       return ext;}
|
  atom = Arguments(symbolsTable)                      {return atom;}
}


External Literal():
{Token t; String u; External ext = new External();}
{
(
  t = <INTEGER_LITERAL>          {ext.javaExpression = t.image; ext.javaType = "Integer";}
|
  t = <FLOATING_POINT_LITERAL>   {ext.javaExpression = t.image; ext.javaType = "Float";}
|
  t = <CHARACTER_LITERAL>        {ext.javaExpression = t.image; ext.javaType = "Character";}
|
  t = <STRING_LITERAL>           {ext.javaExpression = t.image; ext.javaType = "String";}
|
  u = BooleanLiteral()           {ext.javaExpression = u; ext.javaType = "Boolean";}
|
  NullLiteral()                  {ext.javaExpression = "null";}
)
                                 {return ext;}
}


String BooleanLiteral():
{}
{
  "true"    {return "true";}
|
  "false"   {return "false";}
}


void NullLiteral():
{}
{
  "null"
}


External Arguments(SymbolsTable symbolsTable):
{External ext = null;}
{
  "("
  [
    ext = ArgumentList(symbolsTable)
  ]
  ")"
                              {if(ext != null){
                              	 ext.javaExpression = "(" + ext.javaExpression + ")";
                              	 return ext;
                               } else {
                               	 ext = new External();
                               	 ext.javaExpression = "()";
                               	 return ext;
                               }
                              }
}


External ArgumentList(SymbolsTable symbolsTable):
{Atom atom, atom2;}
{
  atom = Expression(symbolsTable)               {Hoclc2j.checkExternal(atom);
    	                                         External ext = (External)atom;}
  (
    ","
    atom2 = Expression(symbolsTable)            {Hoclc2j.checkExternal(atom2);
    	                                         External ext2 = (External)atom2;
    	                                         ext.javaExpression = ext.javaExpression + ", " + ext2.javaExpression;
    	                                         ext.addAllVars(ext2);}
  )*
                                                 {return ext;}
}


External AllocationExpression(SymbolsTable symbolsTable):
{String u,v; External ext;}
{
(
  LOOKAHEAD(2)
  "new"
  u = PrimitiveType()
  ext = ArrayDimsAndInits(symbolsTable)          {ext.javaExpression = "new " + u + ext.javaExpression;
                                                  return ext;}
|
  "new"
  u = ClassOrInterfaceType()                     {u = "new " + u;}
  [
    v = TypeArguments()                          {u = u + v;}
  ]
    (
      ext = ArrayDimsAndInits(symbolsTable)
    |
      ext = Arguments(symbolsTable)
      /*
      [
        ClassOrInterfaceBody(false)
      ]
      */
    )
)
                                                 {ext.javaExpression = u + ext.javaExpression;
                                                  return ext;}
}


/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
External ArrayDimsAndInits(SymbolsTable symbolsTable):
{External ext = new External(), ext2; Atom atom;}
{
  LOOKAHEAD(2)
  (
    LOOKAHEAD(2)
    "["
    atom = Expression(symbolsTable)              {Hoclc2j.checkExternal(atom);
    	                                          ext2 = (External)atom;}
    "]"                                          {ext.javaExpression = ext.javaExpression + "[" + ext2.javaExpression + "]";
    	                                          ext.addAllVars(ext2);}
  )+
  (
    LOOKAHEAD(2)
    "["
    "]"                                          {ext.javaExpression = ext.javaExpression + "[]";}
  )*
                                                 {return ext;}
|
  (
  "["
  "]"                                            {ext.javaExpression = ext.javaExpression + "[]";}
  )+
  ext2 = ArrayInitializer(symbolsTable)          {ext.javaExpression = ext.javaExpression + ext2.javaExpression;
    	                                          ext.addAllVars(ext2);
  	                                              return ext;}
}


/*

 *
 * Statement syntax follows.
 *

void Statement():
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  AssertStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
}

void AssertStatement():
{}
{
  "assert" Expression() [ ":" Expression() ] ";"
}

void LabeledStatement():
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block():
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement():
{}
{
  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration() ";"
|
  Statement()
|
  ClassOrInterfaceDeclaration(0)
}

void LocalVariableDeclaration():
{}
{
  Modifiers() Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement():
{}
{
  ";"
}

void StatementExpression():
 *
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 *
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  ]
}

void SwitchStatement():
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel():
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

void IfStatement():
 *
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 *
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement():
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement():
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ForStatement():
{}
{
  "for" "("

  (
      LOOKAHEAD(Modifiers() Type() <IDENTIFIER> ":")
      Modifiers() Type() <IDENTIFIER> ":" Expression() 
    |
     [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ]
  )

  ")" Statement()
}

void ForInit():
{}
{
  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList():
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate():
{}
{
  StatementExpressionList()
}

void BreakStatement():
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement():
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement():
{}
{
  "return" [ Expression() ] ";"
}

void ThrowStatement():
{}
{
  "throw" Expression() ";"
}

void SynchronizedStatement():
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement():
 *
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 *
{}
{
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]
}

 * We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 *

String RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT} )
   ">" ">" ">"    {return ">>>";}
  )
}

String RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"    {return ">>";}
  )
}

 * Annotation syntax follows. *

void Annotation():
{}
{
   LOOKAHEAD( "@" Name() "(" ( <IDENTIFIER> "=" | ")" ))
   NormalAnnotation()
 |
   LOOKAHEAD( "@" Name() "(" )
   SingleMemberAnnotation()
 |
   MarkerAnnotation()
}

void NormalAnnotation():
{}
{
   "@" Name() "(" [ MemberValuePairs() ] ")"
}

void MarkerAnnotation():
{}
{
  "@" Name()
}

void SingleMemberAnnotation():
{}
{
  "@" Name() "(" MemberValue() ")"
}

void MemberValuePairs():
{}
{
   MemberValuePair() ( "," MemberValuePair() )*
}

void MemberValuePair():
{}
{
    <IDENTIFIER> "=" MemberValue()
}

void MemberValue():
{}
{
   Annotation()
 |
   MemberValueArrayInitializer()
 |
   ConditionalExpression()
}

void  MemberValueArrayInitializer():
{}
{
  "{" MemberValue() ( LOOKAHEAD(2) "," MemberValue() )* [ "," ] "}"
}


 * Annotation Types. *

void AnnotationTypeDeclaration(int modifiers):
{}
{
  "@" "interface" <IDENTIFIER> AnnotationTypeBody()
}

void AnnotationTypeBody():
{}
{
  "{" ( AnnotationTypeMemberDeclaration() )* "}"
}

void AnnotationTypeMemberDeclaration():
{
   int modifiers;
}
{
 modifiers = Modifiers()
 (
   LOOKAHEAD(Type() <IDENTIFIER> "(")
   Type() <IDENTIFIER> "(" ")" [ DefaultValue() ] ";"
  |
   ClassOrInterfaceDeclaration(modifiers)
  |
   EnumDeclaration(modifiers)
  |
   AnnotationTypeDeclaration(modifiers)
  |
   FieldDeclaration(modifiers)
 )
 |
   ( ";" )
}

void DefaultValue():
{}
{
  "default" MemberValue()
}

*/
