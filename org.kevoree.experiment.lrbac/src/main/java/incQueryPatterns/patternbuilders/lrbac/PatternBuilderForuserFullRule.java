/*******************************************************************************
 * Pattern builder for pattern lrbac.userFullRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.lrbac;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern lrbac.userFullRule
 */
public class PatternBuilderForuserFullRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("lrbac.userFullRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("lrbac.userFullRule");
		
		final Address<? extends Receiver> var_140 = buildable.patternCollector("lrbac.userFullRule");
		final Stub<Address<? extends Supplier>> var_141 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_142 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_143 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_142);
		final TupleMask var_144 = new TupleMask(new int[] {}, 0);
		final TupleMask var_145 = new TupleMask(new int[] {}, 2);
		final TupleMask var_146 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_147 = buildable.buildBetaNode(var_141, var_143, var_144, var_145, var_146, false);
		final Stub<Address<? extends Supplier>> var_148 = buildable.buildInjectivityChecker(var_147, 1, new int[] {0});
		final Object var_149 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_150 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_149);
		final TupleMask var_151 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_152 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_153 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_154 = buildable.buildBetaNode(var_148, var_150, var_151, var_152, var_153, false);
		final Stub<Address<? extends Supplier>> var_155 = buildable.buildInjectivityChecker(var_154, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_156 = buildable.buildInjectivityChecker(var_155, 2, new int[] {0});
		final Object var_157 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_158 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_157);
		final TupleMask var_159 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_160 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_161 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_162 = buildable.buildBetaNode(var_156, var_158, var_159, var_160, var_161, false);
		final Stub<Address<? extends Supplier>> var_163 = buildable.buildInjectivityChecker(var_162, 3, new int[] {2});
		final Stub<Address<? extends Supplier>> var_164 = buildable.buildInjectivityChecker(var_163, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_165 = buildable.buildInjectivityChecker(var_164, 3, new int[] {0});
		final Object var_166 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_167 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_166);
		final TupleMask var_168 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_169 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_170 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_171 = buildable.buildBetaNode(var_165, var_167, var_168, var_169, var_170, false);
		final Stub<Address<? extends Supplier>> var_172 = buildable.buildInjectivityChecker(var_171, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_173 = buildable.buildInjectivityChecker(var_172, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_174 = buildable.buildInjectivityChecker(var_173, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_175 = buildable.buildInjectivityChecker(var_174, 4, new int[] {0});
		final TupleMask var_176 = new TupleMask(new int[] {0, 1, 2, 3, 4}, 5);
		final Stub<Address<? extends Supplier>> var_177 = buildable.buildTrimmer(var_175, var_176);
		buildable.buildConnection(var_177, var_140);
		return var_140;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("lrbac.userFullRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("ROLE", 1);
			posMapping.put("PERMISSION", 2);
			posMapping.put("OPERATION", 3);
			posMapping.put("OBJECT", 4);

		}
		return posMapping;
	}
}
