/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.subjectComponent
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.subjectComponent
 */
public class PatternBuilderForsubjectComponent implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.subjectComponent".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.subjectComponent");
		
		final Address<? extends Receiver> var_131 = buildable.patternCollector("enforcementInfo.subjectComponent");
		final Stub<Address<? extends Supplier>> var_132 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_133 = EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance");
		final Stub<Address<? extends Supplier>> var_134 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"C"}), var_133);
		final TupleMask var_135 = new TupleMask(new int[] {}, 0);
		final TupleMask var_136 = new TupleMask(new int[] {}, 1);
		final TupleMask var_137 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_138 = buildable.buildBetaNode(var_132, var_134, var_135, var_136, var_137, false);
		final Object var_139 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_140 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_139);
		final TupleMask var_141 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_142 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_143 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_144 = buildable.buildBetaNode(var_138, var_140, var_141, var_142, var_143, false);
		final Stub<Address<? extends Supplier>> var_145 = buildable.buildInjectivityChecker(var_144, 0, new int[] {1});
		final Object var_146 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_147 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_146);
		final TupleMask var_148 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_149 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_150 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_151 = buildable.buildBetaNode(var_145, var_147, var_148, var_149, var_150, false);
		final Stub<Address<? extends Supplier>> var_152 = buildable.buildInjectivityChecker(var_151, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_153 = buildable.buildInjectivityChecker(var_152, 1, new int[] {2});
		final AbstractEvaluator var_154 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(2).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_155 = buildable.buildPredicateChecker(var_154, null, new int[] {2}, var_153);
		final TupleMask var_156 = new TupleMask(new int[] {0}, 3);
		final Stub<Address<? extends Supplier>> var_157 = buildable.buildTrimmer(var_155, var_156);
		buildable.buildConnection(var_157, var_131);
		return var_131;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.subjectComponent".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);

		}
		return posMapping;
	}
}
