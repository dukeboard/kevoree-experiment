/*******************************************************************************
 * Pattern builder for pattern policy.userOperation
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.userOperation
 */
public class PatternBuilderForuserOperation implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.userOperation".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.userOperation");
		
		final Address<? extends Receiver> var_547 = buildable.patternCollector("policy.userOperation");
		final Stub<Address<? extends Supplier>> var_548 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_549 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("PolicyElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_550 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OPERATIONNAME"}), var_549);
		final TupleMask var_551 = new TupleMask(new int[] {}, 0);
		final TupleMask var_552 = new TupleMask(new int[] {}, 2);
		final TupleMask var_553 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_554 = buildable.buildBetaNode(var_548, var_550, var_551, var_552, var_553, false);
		final Stub<Address<? extends Supplier>> var_555 = buildable.buildInjectivityChecker(var_554, 0, new int[] {1});
		final Object var_556 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_557 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_556);
		final TupleMask var_558 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_559 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_560 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_561 = buildable.buildBetaNode(var_555, var_557, var_558, var_559, var_560, false);
		final Stub<Address<? extends Supplier>> var_562 = buildable.buildInjectivityChecker(var_561, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_563 = buildable.buildInjectivityChecker(var_562, 1, new int[] {2});
		final Object var_564 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_565 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_564);
		final TupleMask var_566 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_567 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_568 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_569 = buildable.buildBetaNode(var_563, var_565, var_566, var_567, var_568, false);
		final Stub<Address<? extends Supplier>> var_570 = buildable.buildInjectivityChecker(var_569, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_571 = buildable.buildInjectivityChecker(var_570, 1, new int[] {3});
		final Stub<Address<? extends Supplier>> var_572 = buildable.buildInjectivityChecker(var_571, 2, new int[] {3});
		final Object var_573 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_574 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_573);
		final TupleMask var_575 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_576 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_577 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_578 = buildable.buildBetaNode(var_572, var_574, var_575, var_576, var_577, false);
		final Stub<Address<? extends Supplier>> var_579 = buildable.buildInjectivityChecker(var_578, 0, new int[] {4});
		final Stub<Address<? extends Supplier>> var_580 = buildable.buildInjectivityChecker(var_579, 1, new int[] {4});
		final Stub<Address<? extends Supplier>> var_581 = buildable.buildInjectivityChecker(var_580, 2, new int[] {4});
		final Stub<Address<? extends Supplier>> var_582 = buildable.buildInjectivityChecker(var_581, 3, new int[] {4});
		final TupleMask var_583 = new TupleMask(new int[] {4, 1}, 5);
		final Stub<Address<? extends Supplier>> var_584 = buildable.buildTrimmer(var_582, var_583);
		buildable.buildConnection(var_584, var_547);
		return var_547;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.userOperation".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATIONNAME", 1);

		}
		return posMapping;
	}
}
