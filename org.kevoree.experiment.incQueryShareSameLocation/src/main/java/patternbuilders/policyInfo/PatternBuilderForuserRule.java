/*******************************************************************************
 * Pattern builder for pattern policyInfo.userRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policyInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policyInfo.userRule
 */
public class PatternBuilderForuserRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policyInfo.userRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policyInfo.userRule");
		
		final Address<? extends Receiver> var_232 = buildable.patternCollector("policyInfo.userRule");
		final Stub<Address<? extends Supplier>> var_233 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_234 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_235 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_234);
		final TupleMask var_236 = new TupleMask(new int[] {}, 0);
		final TupleMask var_237 = new TupleMask(new int[] {}, 2);
		final TupleMask var_238 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_239 = buildable.buildBetaNode(var_233, var_235, var_236, var_237, var_238, false);
		final Stub<Address<? extends Supplier>> var_240 = buildable.buildInjectivityChecker(var_239, 1, new int[] {0});
		final Object var_241 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_242 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_241);
		final TupleMask var_243 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_244 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_245 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_246 = buildable.buildBetaNode(var_240, var_242, var_243, var_244, var_245, false);
		final Stub<Address<? extends Supplier>> var_247 = buildable.buildInjectivityChecker(var_246, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_248 = buildable.buildInjectivityChecker(var_247, 2, new int[] {0});
		final Object var_249 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Operation"))).getEStructuralFeature("resources");
		final Stub<Address<? extends Supplier>> var_250 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_249);
		final TupleMask var_251 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_252 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_253 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_254 = buildable.buildBetaNode(var_248, var_250, var_251, var_252, var_253, false);
		final Stub<Address<? extends Supplier>> var_255 = buildable.buildInjectivityChecker(var_254, 3, new int[] {2});
		final Stub<Address<? extends Supplier>> var_256 = buildable.buildInjectivityChecker(var_255, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_257 = buildable.buildInjectivityChecker(var_256, 3, new int[] {0});
		final Object var_258 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("User"))).getEStructuralFeature("assignedRoles");
		final Stub<Address<? extends Supplier>> var_259 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_258);
		final TupleMask var_260 = new TupleMask(new int[] {0}, 4);
		final TupleMask var_261 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_262 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_263 = buildable.buildBetaNode(var_257, var_259, var_260, var_261, var_262, false);
		final Stub<Address<? extends Supplier>> var_264 = buildable.buildInjectivityChecker(var_263, 3, new int[] {4});
		final Stub<Address<? extends Supplier>> var_265 = buildable.buildInjectivityChecker(var_264, 2, new int[] {4});
		final Stub<Address<? extends Supplier>> var_266 = buildable.buildInjectivityChecker(var_265, 1, new int[] {4});
		final Stub<Address<? extends Supplier>> var_267 = buildable.buildInjectivityChecker(var_266, 0, new int[] {4});
		final TupleMask var_268 = new TupleMask(new int[] {4, 2, 3}, 5);
		final Stub<Address<? extends Supplier>> var_269 = buildable.buildTrimmer(var_267, var_268);
		buildable.buildConnection(var_269, var_232);
		return var_232;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policyInfo.userRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATION", 1);
			posMapping.put("OBJECT", 2);

		}
		return posMapping;
	}
}
