/*******************************************************************************
 * Pattern builder for pattern test.nodeWithTwoCompo
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.test;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern test.nodeWithTwoCompo
 */
public class PatternBuilderFornodeWithTwoCompo implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("test.nodeWithTwoCompo".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("test.nodeWithTwoCompo");
		
		final Address<? extends Receiver> var_118 = buildable.patternCollector("test.nodeWithTwoCompo");
		final Stub<Address<? extends Supplier>> var_119 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_120 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_121 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"X", "C1"}), var_120);
		final TupleMask var_122 = new TupleMask(new int[] {}, 0);
		final TupleMask var_123 = new TupleMask(new int[] {}, 2);
		final TupleMask var_124 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_125 = buildable.buildBetaNode(var_119, var_121, var_122, var_123, var_124, false);
		final Stub<Address<? extends Supplier>> var_126 = buildable.buildInjectivityChecker(var_125, 1, new int[] {0});
		final Object var_127 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_128 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"X", "C2"}), var_127);
		final TupleMask var_129 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_130 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_131 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_132 = buildable.buildBetaNode(var_126, var_128, var_129, var_130, var_131, false);
		final Stub<Address<? extends Supplier>> var_133 = buildable.buildInjectivityChecker(var_132, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_134 = buildable.buildInjectivityChecker(var_133, 2, new int[] {0});
		final TupleMask var_135 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_136 = buildable.buildTrimmer(var_134, var_135);
		buildable.buildConnection(var_136, var_118);
		return var_118;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("test.nodeWithTwoCompo".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("X", 0);
			posMapping.put("C1", 1);
			posMapping.put("C2", 2);

		}
		return posMapping;
	}
}
