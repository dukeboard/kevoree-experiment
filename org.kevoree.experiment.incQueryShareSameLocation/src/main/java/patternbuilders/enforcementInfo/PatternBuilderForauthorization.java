/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.authorization
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.authorization
 */
public class PatternBuilderForauthorization implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.authorization".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.authorization");
		
		final Address<? extends Receiver> var_219 = buildable.patternCollector("enforcementInfo.authorization");
		final Stub<Address<? extends Supplier>> var_220 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_221 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_222 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEFOBJ", "TYPNAMEOBJ"}), var_221);
		final TupleMask var_223 = new TupleMask(new int[] {}, 0);
		final TupleMask var_224 = new TupleMask(new int[] {}, 2);
		final TupleMask var_225 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_226 = buildable.buildBetaNode(var_220, var_222, var_223, var_224, var_225, false);
		final Stub<Address<? extends Supplier>> var_227 = buildable.buildInjectivityChecker(var_226, 0, new int[] {1});
		final AbstractEvaluator var_228 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBook");
			}
		};
		final Stub<Address<? extends Supplier>> var_229 = buildable.buildPredicateChecker(var_228, null, new int[] {1}, var_227);
		final Object var_230 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_231 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OBJECT", "TYPDEFOBJ"}), var_230);
		final TupleMask var_232 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_233 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_234 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_235 = buildable.buildBetaNode(var_229, var_231, var_232, var_233, var_234, false);
		final Stub<Address<? extends Supplier>> var_236 = buildable.buildInjectivityChecker(var_235, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_237 = buildable.buildInjectivityChecker(var_236, 2, new int[] {1});
		final Object var_238 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("provided");
		final Stub<Address<? extends Supplier>> var_239 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OBJECT", "PORTOBJ"}), var_238);
		final TupleMask var_240 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_241 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_242 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_243 = buildable.buildBetaNode(var_237, var_239, var_240, var_241, var_242, false);
		final Stub<Address<? extends Supplier>> var_244 = buildable.buildInjectivityChecker(var_243, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_245 = buildable.buildInjectivityChecker(var_244, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_246 = buildable.buildInjectivityChecker(var_245, 3, new int[] {1});
		final Object var_247 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_248 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDINGCHAOBJ", "PORTOBJ"}), var_247);
		final TupleMask var_249 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_250 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_251 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_252 = buildable.buildBetaNode(var_246, var_248, var_249, var_250, var_251, false);
		final Stub<Address<? extends Supplier>> var_253 = buildable.buildInjectivityChecker(var_252, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_254 = buildable.buildInjectivityChecker(var_253, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_255 = buildable.buildInjectivityChecker(var_254, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_256 = buildable.buildInjectivityChecker(var_255, 4, new int[] {1});
		final Object var_257 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_258 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDINGCHAOBJ", "CHANNEL"}), var_257);
		final TupleMask var_259 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_260 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_261 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_262 = buildable.buildBetaNode(var_256, var_258, var_259, var_260, var_261, false);
		final Stub<Address<? extends Supplier>> var_263 = buildable.buildInjectivityChecker(var_262, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_264 = buildable.buildInjectivityChecker(var_263, 5, new int[] {2});
		final Stub<Address<? extends Supplier>> var_265 = buildable.buildInjectivityChecker(var_264, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_266 = buildable.buildInjectivityChecker(var_265, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_267 = buildable.buildInjectivityChecker(var_266, 5, new int[] {1});
		final Object var_268 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_269 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDINGSUBCHA", "CHANNEL"}), var_268);
		final TupleMask var_270 = new TupleMask(new int[] {5}, 6);
		final TupleMask var_271 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_272 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_273 = buildable.buildBetaNode(var_267, var_269, var_270, var_271, var_272, false);
		final Stub<Address<? extends Supplier>> var_274 = buildable.buildInjectivityChecker(var_273, 4, new int[] {6});
		final Stub<Address<? extends Supplier>> var_275 = buildable.buildInjectivityChecker(var_274, 6, new int[] {5});
		final Stub<Address<? extends Supplier>> var_276 = buildable.buildInjectivityChecker(var_275, 6, new int[] {2});
		final Stub<Address<? extends Supplier>> var_277 = buildable.buildInjectivityChecker(var_276, 6, new int[] {3});
		final Stub<Address<? extends Supplier>> var_278 = buildable.buildInjectivityChecker(var_277, 6, new int[] {0});
		final Stub<Address<? extends Supplier>> var_279 = buildable.buildInjectivityChecker(var_278, 6, new int[] {1});
		final Object var_280 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_281 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDINGSUBCHA", "PORTSUB"}), var_280);
		final TupleMask var_282 = new TupleMask(new int[] {6}, 7);
		final TupleMask var_283 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_284 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_285 = buildable.buildBetaNode(var_279, var_281, var_282, var_283, var_284, false);
		final Stub<Address<? extends Supplier>> var_286 = buildable.buildInjectivityChecker(var_285, 4, new int[] {7});
		final Stub<Address<? extends Supplier>> var_287 = buildable.buildInjectivityChecker(var_286, 6, new int[] {7});
		final Stub<Address<? extends Supplier>> var_288 = buildable.buildInjectivityChecker(var_287, 5, new int[] {7});
		final Stub<Address<? extends Supplier>> var_289 = buildable.buildInjectivityChecker(var_288, 2, new int[] {7});
		final Stub<Address<? extends Supplier>> var_290 = buildable.buildInjectivityChecker(var_289, 3, new int[] {7});
		final Stub<Address<? extends Supplier>> var_291 = buildable.buildInjectivityChecker(var_290, 7, new int[] {0});
		final Stub<Address<? extends Supplier>> var_292 = buildable.buildInjectivityChecker(var_291, 7, new int[] {1});
		final Object var_293 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_294 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"SUBJECT", "PORTSUB"}), var_293);
		final TupleMask var_295 = new TupleMask(new int[] {7}, 8);
		final TupleMask var_296 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_297 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_298 = buildable.buildBetaNode(var_292, var_294, var_295, var_296, var_297, false);
		final Stub<Address<? extends Supplier>> var_299 = buildable.buildInjectivityChecker(var_298, 4, new int[] {8});
		final Stub<Address<? extends Supplier>> var_300 = buildable.buildInjectivityChecker(var_299, 6, new int[] {8});
		final Stub<Address<? extends Supplier>> var_301 = buildable.buildInjectivityChecker(var_300, 5, new int[] {8});
		final Stub<Address<? extends Supplier>> var_302 = buildable.buildInjectivityChecker(var_301, 2, new int[] {8});
		final Stub<Address<? extends Supplier>> var_303 = buildable.buildInjectivityChecker(var_302, 3, new int[] {8});
		final Stub<Address<? extends Supplier>> var_304 = buildable.buildInjectivityChecker(var_303, 7, new int[] {8});
		final Stub<Address<? extends Supplier>> var_305 = buildable.buildInjectivityChecker(var_304, 8, new int[] {0});
		final Stub<Address<? extends Supplier>> var_306 = buildable.buildInjectivityChecker(var_305, 8, new int[] {1});
		final Object var_307 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_308 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"SUBJECT", "TYPDEFSUB"}), var_307);
		final TupleMask var_309 = new TupleMask(new int[] {8}, 9);
		final TupleMask var_310 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_311 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_312 = buildable.buildBetaNode(var_306, var_308, var_309, var_310, var_311, false);
		final Stub<Address<? extends Supplier>> var_313 = buildable.buildInjectivityChecker(var_312, 4, new int[] {9});
		final Stub<Address<? extends Supplier>> var_314 = buildable.buildInjectivityChecker(var_313, 6, new int[] {9});
		final Stub<Address<? extends Supplier>> var_315 = buildable.buildInjectivityChecker(var_314, 5, new int[] {9});
		final Stub<Address<? extends Supplier>> var_316 = buildable.buildInjectivityChecker(var_315, 2, new int[] {9});
		final Stub<Address<? extends Supplier>> var_317 = buildable.buildInjectivityChecker(var_316, 3, new int[] {9});
		final Stub<Address<? extends Supplier>> var_318 = buildable.buildInjectivityChecker(var_317, 7, new int[] {9});
		final Stub<Address<? extends Supplier>> var_319 = buildable.buildInjectivityChecker(var_318, 8, new int[] {9});
		final Stub<Address<? extends Supplier>> var_320 = buildable.buildInjectivityChecker(var_319, 0, new int[] {9});
		final Stub<Address<? extends Supplier>> var_321 = buildable.buildInjectivityChecker(var_320, 9, new int[] {1});
		final Object var_322 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_323 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEFSUB", "TYPNAMESUB"}), var_322);
		final TupleMask var_324 = new TupleMask(new int[] {9}, 10);
		final TupleMask var_325 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_326 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_327 = buildable.buildBetaNode(var_321, var_323, var_324, var_325, var_326, false);
		final Stub<Address<? extends Supplier>> var_328 = buildable.buildInjectivityChecker(var_327, 4, new int[] {10});
		final Stub<Address<? extends Supplier>> var_329 = buildable.buildInjectivityChecker(var_328, 6, new int[] {10});
		final Stub<Address<? extends Supplier>> var_330 = buildable.buildInjectivityChecker(var_329, 5, new int[] {10});
		final Stub<Address<? extends Supplier>> var_331 = buildable.buildInjectivityChecker(var_330, 2, new int[] {10});
		final Stub<Address<? extends Supplier>> var_332 = buildable.buildInjectivityChecker(var_331, 3, new int[] {10});
		final Stub<Address<? extends Supplier>> var_333 = buildable.buildInjectivityChecker(var_332, 7, new int[] {10});
		final Stub<Address<? extends Supplier>> var_334 = buildable.buildInjectivityChecker(var_333, 8, new int[] {10});
		final Stub<Address<? extends Supplier>> var_335 = buildable.buildInjectivityChecker(var_334, 0, new int[] {10});
		final Stub<Address<? extends Supplier>> var_336 = buildable.buildInjectivityChecker(var_335, 9, new int[] {10});
		final Stub<Address<? extends Supplier>> var_337 = buildable.buildInjectivityChecker(var_336, 1, new int[] {10});
		final AbstractEvaluator var_338 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(10).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_339 = buildable.buildPredicateChecker(var_338, null, new int[] {10}, var_337);
		final TupleMask var_340 = new TupleMask(new int[] {8, 5, 2, 7, 3, 6, 4}, 11);
		final Stub<Address<? extends Supplier>> var_341 = buildable.buildTrimmer(var_339, var_340);
		buildable.buildConnection(var_341, var_219);
		return var_219;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.authorization".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("SUBJECT", 0);
			posMapping.put("CHANNEL", 1);
			posMapping.put("OBJECT", 2);
			posMapping.put("PORTSUB", 3);
			posMapping.put("PORTOBJ", 4);
			posMapping.put("BINDINGSUBCHA", 5);
			posMapping.put("BINDINGCHAOBJ", 6);

		}
		return posMapping;
	}
}
