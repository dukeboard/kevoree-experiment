/*******************************************************************************
 * Pattern builder for pattern nodeInfo.nodeSubject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.nodeInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern nodeInfo.nodeSubject
 */
public class PatternBuilderFornodeSubject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("nodeInfo.nodeSubject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("nodeInfo.nodeSubject");
		
		final Address<? extends Receiver> var_629 = buildable.patternCollector("nodeInfo.nodeSubject");
		final Stub<Address<? extends Supplier>> var_630 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_631 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_632 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_631);
		final TupleMask var_633 = new TupleMask(new int[] {}, 0);
		final TupleMask var_634 = new TupleMask(new int[] {}, 2);
		final TupleMask var_635 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_636 = buildable.buildBetaNode(var_630, var_632, var_633, var_634, var_635, false);
		final Stub<Address<? extends Supplier>> var_637 = buildable.buildInjectivityChecker(var_636, 0, new int[] {1});
		final AbstractEvaluator var_638 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_639 = buildable.buildPredicateChecker(var_638, null, new int[] {1}, var_637);
		final Object var_640 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_641 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_640);
		final TupleMask var_642 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_643 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_644 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_645 = buildable.buildBetaNode(var_639, var_641, var_642, var_643, var_644, false);
		final Stub<Address<? extends Supplier>> var_646 = buildable.buildInjectivityChecker(var_645, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_647 = buildable.buildInjectivityChecker(var_646, 2, new int[] {1});
		final Object var_648 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_649 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_648);
		final TupleMask var_650 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_651 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_652 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_653 = buildable.buildBetaNode(var_647, var_649, var_650, var_651, var_652, false);
		final Stub<Address<? extends Supplier>> var_654 = buildable.buildInjectivityChecker(var_653, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_655 = buildable.buildInjectivityChecker(var_654, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_656 = buildable.buildInjectivityChecker(var_655, 3, new int[] {1});
		final TupleMask var_657 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_658 = buildable.buildTrimmer(var_656, var_657);
		buildable.buildConnection(var_658, var_629);
		return var_629;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("nodeInfo.nodeSubject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
