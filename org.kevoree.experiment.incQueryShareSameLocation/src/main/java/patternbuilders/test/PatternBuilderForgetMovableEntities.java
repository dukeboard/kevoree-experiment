/*******************************************************************************
 * Pattern builder for pattern test.getMovableEntities
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.test;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern test.getMovableEntities
 */
public class PatternBuilderForgetMovableEntities implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("test.getMovableEntities".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("test.getMovableEntities");
		
		final Address<? extends Receiver> var_0 = buildable.patternCollector("test.getMovableEntities");
		final Stub<Address<? extends Supplier>> var_1 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_2 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_3 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_2);
		final TupleMask var_4 = new TupleMask(new int[] {}, 0);
		final TupleMask var_5 = new TupleMask(new int[] {}, 2);
		final TupleMask var_6 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_7 = buildable.buildBetaNode(var_1, var_3, var_4, var_5, var_6, false);
		final Stub<Address<? extends Supplier>> var_8 = buildable.buildInjectivityChecker(var_7, 0, new int[] {1});
		final AbstractEvaluator var_9 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"MovableEntity");
			}
		};
		final Stub<Address<? extends Supplier>> var_10 = buildable.buildPredicateChecker(var_9, null, new int[] {1}, var_8);
		final Object var_11 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_12 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_11);
		final TupleMask var_13 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_14 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_15 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_16 = buildable.buildBetaNode(var_10, var_12, var_13, var_14, var_15, false);
		final Stub<Address<? extends Supplier>> var_17 = buildable.buildInjectivityChecker(var_16, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_18 = buildable.buildInjectivityChecker(var_17, 2, new int[] {1});
		final Object var_19 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_20 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_19);
		final TupleMask var_21 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_22 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_23 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_24 = buildable.buildBetaNode(var_18, var_20, var_21, var_22, var_23, false);
		final Stub<Address<? extends Supplier>> var_25 = buildable.buildInjectivityChecker(var_24, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_26 = buildable.buildInjectivityChecker(var_25, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_27 = buildable.buildInjectivityChecker(var_26, 3, new int[] {1});
		final TupleMask var_28 = new TupleMask(new int[] {3, 2}, 4);
		final Stub<Address<? extends Supplier>> var_29 = buildable.buildTrimmer(var_27, var_28);
		buildable.buildConnection(var_29, var_0);
		return var_0;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("test.getMovableEntities".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);
			posMapping.put("C", 1);

		}
		return posMapping;
	}
}
