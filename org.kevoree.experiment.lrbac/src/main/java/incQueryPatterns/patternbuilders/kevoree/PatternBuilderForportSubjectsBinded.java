/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.portSubjectsBinded
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package incQueryPatterns.patternbuilders.kevoree;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.portSubjectsBinded
 */
public class PatternBuilderForportSubjectsBinded implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.portSubjectsBinded".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.portSubjectsBinded");
		
		final Address<? extends Receiver> var_557 = buildable.patternCollector("enforcementInfo.portSubjectsBinded");
		final Stub<Address<? extends Supplier>> var_558 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_559 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_560 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_559);
		final TupleMask var_561 = new TupleMask(new int[] {}, 0);
		final TupleMask var_562 = new TupleMask(new int[] {}, 2);
		final TupleMask var_563 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_564 = buildable.buildBetaNode(var_558, var_560, var_561, var_562, var_563, false);
		final Stub<Address<? extends Supplier>> var_565 = buildable.buildInjectivityChecker(var_564, 0, new int[] {1});
		final AbstractEvaluator var_566 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_567 = buildable.buildPredicateChecker(var_566, null, new int[] {1}, var_565);
		final Object var_568 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_569 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_568);
		final TupleMask var_570 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_571 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_572 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_573 = buildable.buildBetaNode(var_567, var_569, var_570, var_571, var_572, false);
		final Stub<Address<? extends Supplier>> var_574 = buildable.buildInjectivityChecker(var_573, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_575 = buildable.buildInjectivityChecker(var_574, 2, new int[] {1});
		final Object var_576 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_577 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "P"}), var_576);
		final TupleMask var_578 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_579 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_580 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_581 = buildable.buildBetaNode(var_575, var_577, var_578, var_579, var_580, false);
		final Stub<Address<? extends Supplier>> var_582 = buildable.buildInjectivityChecker(var_581, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_583 = buildable.buildInjectivityChecker(var_582, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_584 = buildable.buildInjectivityChecker(var_583, 3, new int[] {1});
		final Object var_585 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_586 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "P"}), var_585);
		final TupleMask var_587 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_588 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_589 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_590 = buildable.buildBetaNode(var_584, var_586, var_587, var_588, var_589, false);
		final Stub<Address<? extends Supplier>> var_591 = buildable.buildInjectivityChecker(var_590, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_592 = buildable.buildInjectivityChecker(var_591, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_593 = buildable.buildInjectivityChecker(var_592, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_594 = buildable.buildInjectivityChecker(var_593, 4, new int[] {1});
		final Object var_595 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_596 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "CHA"}), var_595);
		final TupleMask var_597 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_598 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_599 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_600 = buildable.buildBetaNode(var_594, var_596, var_597, var_598, var_599, false);
		final Stub<Address<? extends Supplier>> var_601 = buildable.buildInjectivityChecker(var_600, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_602 = buildable.buildInjectivityChecker(var_601, 2, new int[] {5});
		final Stub<Address<? extends Supplier>> var_603 = buildable.buildInjectivityChecker(var_602, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_604 = buildable.buildInjectivityChecker(var_603, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_605 = buildable.buildInjectivityChecker(var_604, 5, new int[] {1});
		final TupleMask var_606 = new TupleMask(new int[] {2, 3, 4}, 6);
		final Stub<Address<? extends Supplier>> var_607 = buildable.buildTrimmer(var_605, var_606);
		buildable.buildConnection(var_607, var_557);
		return var_557;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.portSubjectsBinded".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);
			posMapping.put("P", 1);
			posMapping.put("B", 2);

		}
		return posMapping;
	}
}
