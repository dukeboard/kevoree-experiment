/*******************************************************************************
 * Pattern builder for pattern policy.userRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.userRule
 */
public class PatternBuilderForuserRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.userRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.userRule");
		
		final Address<? extends Receiver> var_215 = buildable.patternCollector("policy.userRule");
		final Stub<Address<? extends Supplier>> var_216 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_217 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_218 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_217);
		final TupleMask var_219 = new TupleMask(new int[] {}, 0);
		final TupleMask var_220 = new TupleMask(new int[] {}, 2);
		final TupleMask var_221 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_222 = buildable.buildBetaNode(var_216, var_218, var_219, var_220, var_221, false);
		final Stub<Address<? extends Supplier>> var_223 = buildable.buildInjectivityChecker(var_222, 1, new int[] {0});
		final Object var_224 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_225 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_224);
		final TupleMask var_226 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_227 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_228 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_229 = buildable.buildBetaNode(var_223, var_225, var_226, var_227, var_228, false);
		final Stub<Address<? extends Supplier>> var_230 = buildable.buildInjectivityChecker(var_229, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_231 = buildable.buildInjectivityChecker(var_230, 0, new int[] {2});
		final Object var_232 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_233 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_232);
		final TupleMask var_234 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_235 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_236 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_237 = buildable.buildBetaNode(var_231, var_233, var_234, var_235, var_236, false);
		final Stub<Address<? extends Supplier>> var_238 = buildable.buildInjectivityChecker(var_237, 1, new int[] {3});
		final Stub<Address<? extends Supplier>> var_239 = buildable.buildInjectivityChecker(var_238, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_240 = buildable.buildInjectivityChecker(var_239, 2, new int[] {3});
		final Object var_241 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_242 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_241);
		final TupleMask var_243 = new TupleMask(new int[] {1}, 4);
		final TupleMask var_244 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_245 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_246 = buildable.buildBetaNode(var_240, var_242, var_243, var_244, var_245, false);
		final Stub<Address<? extends Supplier>> var_247 = buildable.buildInjectivityChecker(var_246, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_248 = buildable.buildInjectivityChecker(var_247, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_249 = buildable.buildInjectivityChecker(var_248, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_250 = buildable.buildInjectivityChecker(var_249, 4, new int[] {3});
		final TupleMask var_251 = new TupleMask(new int[] {3, 1, 4}, 5);
		final Stub<Address<? extends Supplier>> var_252 = buildable.buildTrimmer(var_250, var_251);
		buildable.buildConnection(var_252, var_215);
		return var_215;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.userRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATION", 1);
			posMapping.put("OBJECT", 2);

		}
		return posMapping;
	}
}
