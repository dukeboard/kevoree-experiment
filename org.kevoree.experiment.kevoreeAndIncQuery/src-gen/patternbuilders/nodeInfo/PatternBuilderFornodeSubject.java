/*******************************************************************************
 * Pattern builder for pattern nodeInfo.nodeSubject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.nodeInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern nodeInfo.nodeSubject
 */
public class PatternBuilderFornodeSubject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("nodeInfo.nodeSubject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("nodeInfo.nodeSubject");
		
		final Address<? extends Receiver> var_361 = buildable.patternCollector("nodeInfo.nodeSubject");
		final Stub<Address<? extends Supplier>> var_362 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_363 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_364 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_363);
		final TupleMask var_365 = new TupleMask(new int[] {}, 0);
		final TupleMask var_366 = new TupleMask(new int[] {}, 2);
		final TupleMask var_367 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_368 = buildable.buildBetaNode(var_362, var_364, var_365, var_366, var_367, false);
		final Stub<Address<? extends Supplier>> var_369 = buildable.buildInjectivityChecker(var_368, 0, new int[] {1});
		final AbstractEvaluator var_370 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_371 = buildable.buildPredicateChecker(var_370, null, new int[] {1}, var_369);
		final Object var_372 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_373 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_372);
		final TupleMask var_374 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_375 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_376 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_377 = buildable.buildBetaNode(var_371, var_373, var_374, var_375, var_376, false);
		final Stub<Address<? extends Supplier>> var_378 = buildable.buildInjectivityChecker(var_377, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_379 = buildable.buildInjectivityChecker(var_378, 2, new int[] {1});
		final Object var_380 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_381 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_380);
		final TupleMask var_382 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_383 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_384 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_385 = buildable.buildBetaNode(var_379, var_381, var_382, var_383, var_384, false);
		final Stub<Address<? extends Supplier>> var_386 = buildable.buildInjectivityChecker(var_385, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_387 = buildable.buildInjectivityChecker(var_386, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_388 = buildable.buildInjectivityChecker(var_387, 3, new int[] {1});
		final TupleMask var_389 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_390 = buildable.buildTrimmer(var_388, var_389);
		buildable.buildConnection(var_390, var_361);
		return var_361;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("nodeInfo.nodeSubject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
