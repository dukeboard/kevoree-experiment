/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.nodeObject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.nodeObject
 */
public class PatternBuilderFornodeObject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.nodeObject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.nodeObject");
		
		final Address<? extends Receiver> var_469 = buildable.patternCollector("enforcementInfo.nodeObject");
		final Stub<Address<? extends Supplier>> var_470 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_471 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_472 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_471);
		final TupleMask var_473 = new TupleMask(new int[] {}, 0);
		final TupleMask var_474 = new TupleMask(new int[] {}, 2);
		final TupleMask var_475 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_476 = buildable.buildBetaNode(var_470, var_472, var_473, var_474, var_475, false);
		final Stub<Address<? extends Supplier>> var_477 = buildable.buildInjectivityChecker(var_476, 0, new int[] {1});
		final AbstractEvaluator var_478 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBook");
			}
		};
		final Stub<Address<? extends Supplier>> var_479 = buildable.buildPredicateChecker(var_478, null, new int[] {1}, var_477);
		final Object var_480 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_481 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_480);
		final TupleMask var_482 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_483 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_484 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_485 = buildable.buildBetaNode(var_479, var_481, var_482, var_483, var_484, false);
		final Stub<Address<? extends Supplier>> var_486 = buildable.buildInjectivityChecker(var_485, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_487 = buildable.buildInjectivityChecker(var_486, 2, new int[] {1});
		final Object var_488 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_489 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_488);
		final TupleMask var_490 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_491 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_492 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_493 = buildable.buildBetaNode(var_487, var_489, var_490, var_491, var_492, false);
		final Stub<Address<? extends Supplier>> var_494 = buildable.buildInjectivityChecker(var_493, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_495 = buildable.buildInjectivityChecker(var_494, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_496 = buildable.buildInjectivityChecker(var_495, 3, new int[] {1});
		final TupleMask var_497 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_498 = buildable.buildTrimmer(var_496, var_497);
		buildable.buildConnection(var_498, var_469);
		return var_469;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.nodeObject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
