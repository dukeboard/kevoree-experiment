/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.nodeObject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.nodeObject
 */
public class PatternBuilderFornodeObject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.nodeObject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.nodeObject");
		
		final Address<? extends Receiver> var_158 = buildable.patternCollector("enforcementInfo.nodeObject");
		final Stub<Address<? extends Supplier>> var_159 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_160 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_161 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_160);
		final TupleMask var_162 = new TupleMask(new int[] {}, 0);
		final TupleMask var_163 = new TupleMask(new int[] {}, 2);
		final TupleMask var_164 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_165 = buildable.buildBetaNode(var_159, var_161, var_162, var_163, var_164, false);
		final Stub<Address<? extends Supplier>> var_166 = buildable.buildInjectivityChecker(var_165, 0, new int[] {1});
		final AbstractEvaluator var_167 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBook");
			}
		};
		final Stub<Address<? extends Supplier>> var_168 = buildable.buildPredicateChecker(var_167, null, new int[] {1}, var_166);
		final Object var_169 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_170 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_169);
		final TupleMask var_171 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_172 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_173 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_174 = buildable.buildBetaNode(var_168, var_170, var_171, var_172, var_173, false);
		final Stub<Address<? extends Supplier>> var_175 = buildable.buildInjectivityChecker(var_174, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_176 = buildable.buildInjectivityChecker(var_175, 2, new int[] {1});
		final Object var_177 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_178 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_177);
		final TupleMask var_179 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_180 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_181 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_182 = buildable.buildBetaNode(var_176, var_178, var_179, var_180, var_181, false);
		final Stub<Address<? extends Supplier>> var_183 = buildable.buildInjectivityChecker(var_182, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_184 = buildable.buildInjectivityChecker(var_183, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_185 = buildable.buildInjectivityChecker(var_184, 3, new int[] {1});
		final TupleMask var_186 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_187 = buildable.buildTrimmer(var_185, var_186);
		buildable.buildConnection(var_187, var_158);
		return var_158;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.nodeObject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
