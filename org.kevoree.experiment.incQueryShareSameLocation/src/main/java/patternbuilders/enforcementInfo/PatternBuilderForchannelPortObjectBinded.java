/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.channelPortObjectBinded
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.channelPortObjectBinded
 */
public class PatternBuilderForchannelPortObjectBinded implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.channelPortObjectBinded".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.channelPortObjectBinded");
		
		final Address<? extends Receiver> var_168 = buildable.patternCollector("enforcementInfo.channelPortObjectBinded");
		final Stub<Address<? extends Supplier>> var_169 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_170 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_171 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_170);
		final TupleMask var_172 = new TupleMask(new int[] {}, 0);
		final TupleMask var_173 = new TupleMask(new int[] {}, 2);
		final TupleMask var_174 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_175 = buildable.buildBetaNode(var_169, var_171, var_172, var_173, var_174, false);
		final Stub<Address<? extends Supplier>> var_176 = buildable.buildInjectivityChecker(var_175, 0, new int[] {1});
		final AbstractEvaluator var_177 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBook");
			}
		};
		final Stub<Address<? extends Supplier>> var_178 = buildable.buildPredicateChecker(var_177, null, new int[] {1}, var_176);
		final Object var_179 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_180 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OBJECT", "TYPDEF"}), var_179);
		final TupleMask var_181 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_182 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_183 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_184 = buildable.buildBetaNode(var_178, var_180, var_181, var_182, var_183, false);
		final Stub<Address<? extends Supplier>> var_185 = buildable.buildInjectivityChecker(var_184, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_186 = buildable.buildInjectivityChecker(var_185, 2, new int[] {1});
		final Object var_187 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("provided");
		final Stub<Address<? extends Supplier>> var_188 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OBJECT", "PORT"}), var_187);
		final TupleMask var_189 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_190 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_191 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_192 = buildable.buildBetaNode(var_186, var_188, var_189, var_190, var_191, false);
		final Stub<Address<? extends Supplier>> var_193 = buildable.buildInjectivityChecker(var_192, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_194 = buildable.buildInjectivityChecker(var_193, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_195 = buildable.buildInjectivityChecker(var_194, 3, new int[] {1});
		final Object var_196 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_197 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDING", "PORT"}), var_196);
		final TupleMask var_198 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_199 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_200 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_201 = buildable.buildBetaNode(var_195, var_197, var_198, var_199, var_200, false);
		final Stub<Address<? extends Supplier>> var_202 = buildable.buildInjectivityChecker(var_201, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_203 = buildable.buildInjectivityChecker(var_202, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_204 = buildable.buildInjectivityChecker(var_203, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_205 = buildable.buildInjectivityChecker(var_204, 4, new int[] {1});
		final Object var_206 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_207 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDING", "CHANNEL"}), var_206);
		final TupleMask var_208 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_209 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_210 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_211 = buildable.buildBetaNode(var_205, var_207, var_208, var_209, var_210, false);
		final Stub<Address<? extends Supplier>> var_212 = buildable.buildInjectivityChecker(var_211, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_213 = buildable.buildInjectivityChecker(var_212, 5, new int[] {2});
		final Stub<Address<? extends Supplier>> var_214 = buildable.buildInjectivityChecker(var_213, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_215 = buildable.buildInjectivityChecker(var_214, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_216 = buildable.buildInjectivityChecker(var_215, 5, new int[] {1});
		final TupleMask var_217 = new TupleMask(new int[] {2, 5, 3, 4}, 6);
		final Stub<Address<? extends Supplier>> var_218 = buildable.buildTrimmer(var_216, var_217);
		buildable.buildConnection(var_218, var_168);
		return var_168;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.channelPortObjectBinded".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("OBJECT", 0);
			posMapping.put("CHANNEL", 1);
			posMapping.put("PORT", 2);
			posMapping.put("BINDING", 3);

		}
		return posMapping;
	}
}
