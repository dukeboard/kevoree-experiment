/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.portSubjectsBinded
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.portSubjectsBinded
 */
public class PatternBuilderForportSubjectsBinded implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.portSubjectsBinded".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.portSubjectsBinded");
		
		final Address<? extends Receiver> var_40 = buildable.patternCollector("enforcementInfo.portSubjectsBinded");
		final Stub<Address<? extends Supplier>> var_41 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_42 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_43 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_42);
		final TupleMask var_44 = new TupleMask(new int[] {}, 0);
		final TupleMask var_45 = new TupleMask(new int[] {}, 2);
		final TupleMask var_46 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_47 = buildable.buildBetaNode(var_41, var_43, var_44, var_45, var_46, false);
		final Stub<Address<? extends Supplier>> var_48 = buildable.buildInjectivityChecker(var_47, 0, new int[] {1});
		final AbstractEvaluator var_49 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_50 = buildable.buildPredicateChecker(var_49, null, new int[] {1}, var_48);
		final Object var_51 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_52 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_51);
		final TupleMask var_53 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_54 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_55 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_56 = buildable.buildBetaNode(var_50, var_52, var_53, var_54, var_55, false);
		final Stub<Address<? extends Supplier>> var_57 = buildable.buildInjectivityChecker(var_56, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_58 = buildable.buildInjectivityChecker(var_57, 2, new int[] {1});
		final Object var_59 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_60 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "P"}), var_59);
		final TupleMask var_61 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_62 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_63 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_64 = buildable.buildBetaNode(var_58, var_60, var_61, var_62, var_63, false);
		final Stub<Address<? extends Supplier>> var_65 = buildable.buildInjectivityChecker(var_64, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_66 = buildable.buildInjectivityChecker(var_65, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_67 = buildable.buildInjectivityChecker(var_66, 3, new int[] {1});
		final Object var_68 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_69 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "P"}), var_68);
		final TupleMask var_70 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_71 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_72 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_73 = buildable.buildBetaNode(var_67, var_69, var_70, var_71, var_72, false);
		final Stub<Address<? extends Supplier>> var_74 = buildable.buildInjectivityChecker(var_73, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_75 = buildable.buildInjectivityChecker(var_74, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_76 = buildable.buildInjectivityChecker(var_75, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_77 = buildable.buildInjectivityChecker(var_76, 4, new int[] {1});
		final Object var_78 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_79 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "CHA"}), var_78);
		final TupleMask var_80 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_81 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_82 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_83 = buildable.buildBetaNode(var_77, var_79, var_80, var_81, var_82, false);
		final Stub<Address<? extends Supplier>> var_84 = buildable.buildInjectivityChecker(var_83, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_85 = buildable.buildInjectivityChecker(var_84, 2, new int[] {5});
		final Stub<Address<? extends Supplier>> var_86 = buildable.buildInjectivityChecker(var_85, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_87 = buildable.buildInjectivityChecker(var_86, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_88 = buildable.buildInjectivityChecker(var_87, 5, new int[] {1});
		final TupleMask var_89 = new TupleMask(new int[] {2, 3, 4}, 6);
		final Stub<Address<? extends Supplier>> var_90 = buildable.buildTrimmer(var_88, var_89);
		buildable.buildConnection(var_90, var_40);
		return var_40;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.portSubjectsBinded".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);
			posMapping.put("P", 1);
			posMapping.put("B", 2);

		}
		return posMapping;
	}
}
