/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.channelPortObjectBinded
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.channelPortObjectBinded
 */
public class PatternBuilderForchannelPortObjectBinded implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.channelPortObjectBinded".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.channelPortObjectBinded");
		
		final Address<? extends Receiver> var_359 = buildable.patternCollector("enforcementInfo.channelPortObjectBinded");
		final Stub<Address<? extends Supplier>> var_360 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_361 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_362 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_361);
		final TupleMask var_363 = new TupleMask(new int[] {}, 0);
		final TupleMask var_364 = new TupleMask(new int[] {}, 2);
		final TupleMask var_365 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_366 = buildable.buildBetaNode(var_360, var_362, var_363, var_364, var_365, false);
		final Stub<Address<? extends Supplier>> var_367 = buildable.buildInjectivityChecker(var_366, 0, new int[] {1});
		final AbstractEvaluator var_368 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBook");
			}
		};
		final Stub<Address<? extends Supplier>> var_369 = buildable.buildPredicateChecker(var_368, null, new int[] {1}, var_367);
		final Object var_370 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_371 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OBJECT", "TYPDEF"}), var_370);
		final TupleMask var_372 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_373 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_374 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_375 = buildable.buildBetaNode(var_369, var_371, var_372, var_373, var_374, false);
		final Stub<Address<? extends Supplier>> var_376 = buildable.buildInjectivityChecker(var_375, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_377 = buildable.buildInjectivityChecker(var_376, 2, new int[] {1});
		final Object var_378 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("provided");
		final Stub<Address<? extends Supplier>> var_379 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OBJECT", "PORT"}), var_378);
		final TupleMask var_380 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_381 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_382 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_383 = buildable.buildBetaNode(var_377, var_379, var_380, var_381, var_382, false);
		final Stub<Address<? extends Supplier>> var_384 = buildable.buildInjectivityChecker(var_383, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_385 = buildable.buildInjectivityChecker(var_384, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_386 = buildable.buildInjectivityChecker(var_385, 3, new int[] {1});
		final Object var_387 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_388 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDING", "PORT"}), var_387);
		final TupleMask var_389 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_390 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_391 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_392 = buildable.buildBetaNode(var_386, var_388, var_389, var_390, var_391, false);
		final Stub<Address<? extends Supplier>> var_393 = buildable.buildInjectivityChecker(var_392, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_394 = buildable.buildInjectivityChecker(var_393, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_395 = buildable.buildInjectivityChecker(var_394, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_396 = buildable.buildInjectivityChecker(var_395, 4, new int[] {1});
		final Object var_397 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_398 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"BINDING", "CHANNEL"}), var_397);
		final TupleMask var_399 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_400 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_401 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_402 = buildable.buildBetaNode(var_396, var_398, var_399, var_400, var_401, false);
		final Stub<Address<? extends Supplier>> var_403 = buildable.buildInjectivityChecker(var_402, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_404 = buildable.buildInjectivityChecker(var_403, 5, new int[] {2});
		final Stub<Address<? extends Supplier>> var_405 = buildable.buildInjectivityChecker(var_404, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_406 = buildable.buildInjectivityChecker(var_405, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_407 = buildable.buildInjectivityChecker(var_406, 5, new int[] {1});
		final TupleMask var_408 = new TupleMask(new int[] {2, 5, 3, 4}, 6);
		final Stub<Address<? extends Supplier>> var_409 = buildable.buildTrimmer(var_407, var_408);
		buildable.buildConnection(var_409, var_359);
		return var_359;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.channelPortObjectBinded".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("OBJECT", 0);
			posMapping.put("CHANNEL", 1);
			posMapping.put("PORT", 2);
			posMapping.put("BINDING", 3);

		}
		return posMapping;
	}
}
