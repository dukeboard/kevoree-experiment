/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.portSubjectsBinded
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.portSubjectsBinded
 */
public class PatternBuilderForportSubjectsBinded implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.portSubjectsBinded".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.portSubjectsBinded");
		
		final Address<? extends Receiver> var_181 = buildable.patternCollector("enforcementInfo.portSubjectsBinded");
		final Stub<Address<? extends Supplier>> var_182 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_183 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_184 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_183);
		final TupleMask var_185 = new TupleMask(new int[] {}, 0);
		final TupleMask var_186 = new TupleMask(new int[] {}, 2);
		final TupleMask var_187 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_188 = buildable.buildBetaNode(var_182, var_184, var_185, var_186, var_187, false);
		final Stub<Address<? extends Supplier>> var_189 = buildable.buildInjectivityChecker(var_188, 0, new int[] {1});
		final AbstractEvaluator var_190 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_191 = buildable.buildPredicateChecker(var_190, null, new int[] {1}, var_189);
		final Object var_192 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_193 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_192);
		final TupleMask var_194 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_195 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_196 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_197 = buildable.buildBetaNode(var_191, var_193, var_194, var_195, var_196, false);
		final Stub<Address<? extends Supplier>> var_198 = buildable.buildInjectivityChecker(var_197, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_199 = buildable.buildInjectivityChecker(var_198, 2, new int[] {1});
		final Object var_200 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_201 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "P"}), var_200);
		final TupleMask var_202 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_203 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_204 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_205 = buildable.buildBetaNode(var_199, var_201, var_202, var_203, var_204, false);
		final Stub<Address<? extends Supplier>> var_206 = buildable.buildInjectivityChecker(var_205, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_207 = buildable.buildInjectivityChecker(var_206, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_208 = buildable.buildInjectivityChecker(var_207, 3, new int[] {1});
		final Object var_209 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_210 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "P"}), var_209);
		final TupleMask var_211 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_212 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_213 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_214 = buildable.buildBetaNode(var_208, var_210, var_211, var_212, var_213, false);
		final Stub<Address<? extends Supplier>> var_215 = buildable.buildInjectivityChecker(var_214, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_216 = buildable.buildInjectivityChecker(var_215, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_217 = buildable.buildInjectivityChecker(var_216, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_218 = buildable.buildInjectivityChecker(var_217, 4, new int[] {1});
		final Object var_219 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_220 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "CHA"}), var_219);
		final TupleMask var_221 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_222 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_223 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_224 = buildable.buildBetaNode(var_218, var_220, var_221, var_222, var_223, false);
		final Stub<Address<? extends Supplier>> var_225 = buildable.buildInjectivityChecker(var_224, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_226 = buildable.buildInjectivityChecker(var_225, 2, new int[] {5});
		final Stub<Address<? extends Supplier>> var_227 = buildable.buildInjectivityChecker(var_226, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_228 = buildable.buildInjectivityChecker(var_227, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_229 = buildable.buildInjectivityChecker(var_228, 5, new int[] {1});
		final TupleMask var_230 = new TupleMask(new int[] {2, 3, 4}, 6);
		final Stub<Address<? extends Supplier>> var_231 = buildable.buildTrimmer(var_229, var_230);
		buildable.buildConnection(var_231, var_181);
		return var_181;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.portSubjectsBinded".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);
			posMapping.put("P", 1);
			posMapping.put("B", 2);

		}
		return posMapping;
	}
}
