/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.nodeSubject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.nodeSubject
 */
public class PatternBuilderFornodeSubject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.nodeSubject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.nodeSubject");
		
		final Address<? extends Receiver> var_346 = buildable.patternCollector("enforcementInfo.nodeSubject");
		final Stub<Address<? extends Supplier>> var_347 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_348 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_349 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_348);
		final TupleMask var_350 = new TupleMask(new int[] {}, 0);
		final TupleMask var_351 = new TupleMask(new int[] {}, 2);
		final TupleMask var_352 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_353 = buildable.buildBetaNode(var_347, var_349, var_350, var_351, var_352, false);
		final Stub<Address<? extends Supplier>> var_354 = buildable.buildInjectivityChecker(var_353, 0, new int[] {1});
		final AbstractEvaluator var_355 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_356 = buildable.buildPredicateChecker(var_355, null, new int[] {1}, var_354);
		final Object var_357 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_358 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_357);
		final TupleMask var_359 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_360 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_361 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_362 = buildable.buildBetaNode(var_356, var_358, var_359, var_360, var_361, false);
		final Stub<Address<? extends Supplier>> var_363 = buildable.buildInjectivityChecker(var_362, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_364 = buildable.buildInjectivityChecker(var_363, 2, new int[] {1});
		final Object var_365 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_366 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_365);
		final TupleMask var_367 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_368 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_369 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_370 = buildable.buildBetaNode(var_364, var_366, var_367, var_368, var_369, false);
		final Stub<Address<? extends Supplier>> var_371 = buildable.buildInjectivityChecker(var_370, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_372 = buildable.buildInjectivityChecker(var_371, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_373 = buildable.buildInjectivityChecker(var_372, 3, new int[] {1});
		final TupleMask var_374 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_375 = buildable.buildTrimmer(var_373, var_374);
		buildable.buildConnection(var_375, var_346);
		return var_346;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.nodeSubject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
