/*******************************************************************************
 * Pattern builder for pattern policyInfo.userOperation
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policyInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policyInfo.userOperation
 */
public class PatternBuilderForuserOperation implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policyInfo.userOperation".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policyInfo.userOperation");
		
		final Address<? extends Receiver> var_123 = buildable.patternCollector("policyInfo.userOperation");
		final Stub<Address<? extends Supplier>> var_124 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_125 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("PolicyElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_126 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OPERATIONNAME"}), var_125);
		final TupleMask var_127 = new TupleMask(new int[] {}, 0);
		final TupleMask var_128 = new TupleMask(new int[] {}, 2);
		final TupleMask var_129 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_130 = buildable.buildBetaNode(var_124, var_126, var_127, var_128, var_129, false);
		final Stub<Address<? extends Supplier>> var_131 = buildable.buildInjectivityChecker(var_130, 0, new int[] {1});
		final Object var_132 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_133 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_132);
		final TupleMask var_134 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_135 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_136 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_137 = buildable.buildBetaNode(var_131, var_133, var_134, var_135, var_136, false);
		final Stub<Address<? extends Supplier>> var_138 = buildable.buildInjectivityChecker(var_137, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_139 = buildable.buildInjectivityChecker(var_138, 1, new int[] {2});
		final Object var_140 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_141 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_140);
		final TupleMask var_142 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_143 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_144 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_145 = buildable.buildBetaNode(var_139, var_141, var_142, var_143, var_144, false);
		final Stub<Address<? extends Supplier>> var_146 = buildable.buildInjectivityChecker(var_145, 0, new int[] {3});
		final Stub<Address<? extends Supplier>> var_147 = buildable.buildInjectivityChecker(var_146, 1, new int[] {3});
		final Stub<Address<? extends Supplier>> var_148 = buildable.buildInjectivityChecker(var_147, 2, new int[] {3});
		final Object var_149 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("User"))).getEStructuralFeature("assignedRoles");
		final Stub<Address<? extends Supplier>> var_150 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_149);
		final TupleMask var_151 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_152 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_153 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_154 = buildable.buildBetaNode(var_148, var_150, var_151, var_152, var_153, false);
		final Stub<Address<? extends Supplier>> var_155 = buildable.buildInjectivityChecker(var_154, 0, new int[] {4});
		final Stub<Address<? extends Supplier>> var_156 = buildable.buildInjectivityChecker(var_155, 1, new int[] {4});
		final Stub<Address<? extends Supplier>> var_157 = buildable.buildInjectivityChecker(var_156, 2, new int[] {4});
		final Stub<Address<? extends Supplier>> var_158 = buildable.buildInjectivityChecker(var_157, 3, new int[] {4});
		final TupleMask var_159 = new TupleMask(new int[] {4, 1}, 5);
		final Stub<Address<? extends Supplier>> var_160 = buildable.buildTrimmer(var_158, var_159);
		buildable.buildConnection(var_160, var_123);
		return var_123;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policyInfo.userOperation".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATIONNAME", 1);

		}
		return posMapping;
	}
}
