/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.nodeObject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.nodeObject
 */
public class PatternBuilderFornodeObject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.nodeObject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.nodeObject");
		
		final Address<? extends Receiver> var_192 = buildable.patternCollector("enforcementInfo.nodeObject");
		final Stub<Address<? extends Supplier>> var_193 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_194 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_195 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_194);
		final TupleMask var_196 = new TupleMask(new int[] {}, 0);
		final TupleMask var_197 = new TupleMask(new int[] {}, 2);
		final TupleMask var_198 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_199 = buildable.buildBetaNode(var_193, var_195, var_196, var_197, var_198, false);
		final Stub<Address<? extends Supplier>> var_200 = buildable.buildInjectivityChecker(var_199, 0, new int[] {1});
		final AbstractEvaluator var_201 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBook");
			}
		};
		final Stub<Address<? extends Supplier>> var_202 = buildable.buildPredicateChecker(var_201, null, new int[] {1}, var_200);
		final Object var_203 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_204 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_203);
		final TupleMask var_205 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_206 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_207 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_208 = buildable.buildBetaNode(var_202, var_204, var_205, var_206, var_207, false);
		final Stub<Address<? extends Supplier>> var_209 = buildable.buildInjectivityChecker(var_208, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_210 = buildable.buildInjectivityChecker(var_209, 2, new int[] {1});
		final Object var_211 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_212 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_211);
		final TupleMask var_213 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_214 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_215 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_216 = buildable.buildBetaNode(var_210, var_212, var_213, var_214, var_215, false);
		final Stub<Address<? extends Supplier>> var_217 = buildable.buildInjectivityChecker(var_216, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_218 = buildable.buildInjectivityChecker(var_217, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_219 = buildable.buildInjectivityChecker(var_218, 3, new int[] {1});
		final TupleMask var_220 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_221 = buildable.buildTrimmer(var_219, var_220);
		buildable.buildConnection(var_221, var_192);
		return var_192;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.nodeObject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
