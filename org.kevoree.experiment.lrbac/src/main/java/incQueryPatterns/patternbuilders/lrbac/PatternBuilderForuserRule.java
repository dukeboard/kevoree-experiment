/*******************************************************************************
 * Pattern builder for pattern lrbac.userRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package incQueryPatterns.patternbuilders.lrbac;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern lrbac.userRule
 */
public class PatternBuilderForuserRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("lrbac.userRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("lrbac.userRule");
		
		final Address<? extends Receiver> var_178 = buildable.patternCollector("lrbac.userRule");
		final Stub<Address<? extends Supplier>> var_179 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_180 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("User"))).getEStructuralFeature("roles");
		final Stub<Address<? extends Supplier>> var_181 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_180);
		final TupleMask var_182 = new TupleMask(new int[] {}, 0);
		final TupleMask var_183 = new TupleMask(new int[] {}, 2);
		final TupleMask var_184 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_185 = buildable.buildBetaNode(var_179, var_181, var_182, var_183, var_184, false);
		final Stub<Address<? extends Supplier>> var_186 = buildable.buildInjectivityChecker(var_185, 1, new int[] {0});
		final Object var_187 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_188 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_187);
		final TupleMask var_189 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_190 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_191 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_192 = buildable.buildBetaNode(var_186, var_188, var_189, var_190, var_191, false);
		final Stub<Address<? extends Supplier>> var_193 = buildable.buildInjectivityChecker(var_192, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_194 = buildable.buildInjectivityChecker(var_193, 2, new int[] {0});
		final Object var_195 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_196 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_195);
		final TupleMask var_197 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_198 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_199 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_200 = buildable.buildBetaNode(var_194, var_196, var_197, var_198, var_199, false);
		final Stub<Address<? extends Supplier>> var_201 = buildable.buildInjectivityChecker(var_200, 3, new int[] {2});
		final Stub<Address<? extends Supplier>> var_202 = buildable.buildInjectivityChecker(var_201, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_203 = buildable.buildInjectivityChecker(var_202, 3, new int[] {0});
		final Object var_204 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_205 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_204);
		final TupleMask var_206 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_207 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_208 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_209 = buildable.buildBetaNode(var_203, var_205, var_206, var_207, var_208, false);
		final Stub<Address<? extends Supplier>> var_210 = buildable.buildInjectivityChecker(var_209, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_211 = buildable.buildInjectivityChecker(var_210, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_212 = buildable.buildInjectivityChecker(var_211, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_213 = buildable.buildInjectivityChecker(var_212, 4, new int[] {0});
		final TupleMask var_214 = new TupleMask(new int[] {0, 3, 4}, 5);
		final Stub<Address<? extends Supplier>> var_215 = buildable.buildTrimmer(var_213, var_214);
		buildable.buildConnection(var_215, var_178);
		return var_178;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("lrbac.userRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATION", 1);
			posMapping.put("OBJECT", 2);

		}
		return posMapping;
	}
}
