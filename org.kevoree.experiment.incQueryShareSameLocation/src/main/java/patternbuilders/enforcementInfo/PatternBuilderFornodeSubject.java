/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.nodeSubject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.nodeSubject
 */
public class PatternBuilderFornodeSubject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.nodeSubject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.nodeSubject");
		
		final Address<? extends Receiver> var_57 = buildable.patternCollector("enforcementInfo.nodeSubject");
		final Stub<Address<? extends Supplier>> var_58 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_59 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_60 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_59);
		final TupleMask var_61 = new TupleMask(new int[] {}, 0);
		final TupleMask var_62 = new TupleMask(new int[] {}, 2);
		final TupleMask var_63 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_64 = buildable.buildBetaNode(var_58, var_60, var_61, var_62, var_63, false);
		final Stub<Address<? extends Supplier>> var_65 = buildable.buildInjectivityChecker(var_64, 0, new int[] {1});
		final AbstractEvaluator var_66 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_67 = buildable.buildPredicateChecker(var_66, null, new int[] {1}, var_65);
		final Object var_68 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_69 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_68);
		final TupleMask var_70 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_71 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_72 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_73 = buildable.buildBetaNode(var_67, var_69, var_70, var_71, var_72, false);
		final Stub<Address<? extends Supplier>> var_74 = buildable.buildInjectivityChecker(var_73, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_75 = buildable.buildInjectivityChecker(var_74, 2, new int[] {1});
		final Object var_76 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_77 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_76);
		final TupleMask var_78 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_79 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_80 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_81 = buildable.buildBetaNode(var_75, var_77, var_78, var_79, var_80, false);
		final Stub<Address<? extends Supplier>> var_82 = buildable.buildInjectivityChecker(var_81, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_83 = buildable.buildInjectivityChecker(var_82, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_84 = buildable.buildInjectivityChecker(var_83, 3, new int[] {1});
		final TupleMask var_85 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_86 = buildable.buildTrimmer(var_84, var_85);
		buildable.buildConnection(var_86, var_57);
		return var_57;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.nodeSubject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
