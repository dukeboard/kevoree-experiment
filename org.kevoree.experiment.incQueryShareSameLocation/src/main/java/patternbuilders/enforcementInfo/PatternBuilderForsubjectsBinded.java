/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.subjectsBinded
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.subjectsBinded
 */
public class PatternBuilderForsubjectsBinded implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.subjectsBinded".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.subjectsBinded");
		
		final Address<? extends Receiver> var_147 = buildable.patternCollector("enforcementInfo.subjectsBinded");
		final Stub<Address<? extends Supplier>> var_148 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_149 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_150 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_149);
		final TupleMask var_151 = new TupleMask(new int[] {}, 0);
		final TupleMask var_152 = new TupleMask(new int[] {}, 2);
		final TupleMask var_153 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_154 = buildable.buildBetaNode(var_148, var_150, var_151, var_152, var_153, false);
		final Stub<Address<? extends Supplier>> var_155 = buildable.buildInjectivityChecker(var_154, 0, new int[] {1});
		final AbstractEvaluator var_156 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_157 = buildable.buildPredicateChecker(var_156, null, new int[] {1}, var_155);
		final Object var_158 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_159 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_158);
		final TupleMask var_160 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_161 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_162 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_163 = buildable.buildBetaNode(var_157, var_159, var_160, var_161, var_162, false);
		final Stub<Address<? extends Supplier>> var_164 = buildable.buildInjectivityChecker(var_163, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_165 = buildable.buildInjectivityChecker(var_164, 2, new int[] {1});
		final Object var_166 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_167 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "P"}), var_166);
		final TupleMask var_168 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_169 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_170 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_171 = buildable.buildBetaNode(var_165, var_167, var_168, var_169, var_170, false);
		final Stub<Address<? extends Supplier>> var_172 = buildable.buildInjectivityChecker(var_171, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_173 = buildable.buildInjectivityChecker(var_172, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_174 = buildable.buildInjectivityChecker(var_173, 3, new int[] {1});
		final Object var_175 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_176 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "P"}), var_175);
		final TupleMask var_177 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_178 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_179 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_180 = buildable.buildBetaNode(var_174, var_176, var_177, var_178, var_179, false);
		final Stub<Address<? extends Supplier>> var_181 = buildable.buildInjectivityChecker(var_180, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_182 = buildable.buildInjectivityChecker(var_181, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_183 = buildable.buildInjectivityChecker(var_182, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_184 = buildable.buildInjectivityChecker(var_183, 4, new int[] {1});
		final Object var_185 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_186 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "CHA"}), var_185);
		final TupleMask var_187 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_188 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_189 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_190 = buildable.buildBetaNode(var_184, var_186, var_187, var_188, var_189, false);
		final Stub<Address<? extends Supplier>> var_191 = buildable.buildInjectivityChecker(var_190, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_192 = buildable.buildInjectivityChecker(var_191, 2, new int[] {5});
		final Stub<Address<? extends Supplier>> var_193 = buildable.buildInjectivityChecker(var_192, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_194 = buildable.buildInjectivityChecker(var_193, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_195 = buildable.buildInjectivityChecker(var_194, 5, new int[] {1});
		final TupleMask var_196 = new TupleMask(new int[] {2}, 6);
		final Stub<Address<? extends Supplier>> var_197 = buildable.buildTrimmer(var_195, var_196);
		buildable.buildConnection(var_197, var_147);
		return var_147;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.subjectsBinded".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);

		}
		return posMapping;
	}
}
