/*******************************************************************************
 * Pattern builder for pattern lrbac.OperationObjectAssignment
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package incQueryPatterns.patternbuilders.lrbac;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern lrbac.OperationObjectAssignment
 */
public class PatternBuilderForOperationObjectAssignment implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("lrbac.OperationObjectAssignment".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("lrbac.OperationObjectAssignment");
		
		final Address<? extends Receiver> var_121 = buildable.patternCollector("lrbac.OperationObjectAssignment");
		final Stub<Address<? extends Supplier>> var_122 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_123 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_124 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPE", "OBJ"}), var_123);
		final TupleMask var_125 = new TupleMask(new int[] {}, 0);
		final TupleMask var_126 = new TupleMask(new int[] {}, 2);
		final TupleMask var_127 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_128 = buildable.buildBetaNode(var_122, var_124, var_125, var_126, var_127, false);
		final Stub<Address<? extends Supplier>> var_129 = buildable.buildInjectivityChecker(var_128, 1, new int[] {0});
		final Object var_130 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_131 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERM", "OPE"}), var_130);
		final TupleMask var_132 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_133 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_134 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_135 = buildable.buildBetaNode(var_129, var_131, var_132, var_133, var_134, false);
		final Stub<Address<? extends Supplier>> var_136 = buildable.buildInjectivityChecker(var_135, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_137 = buildable.buildInjectivityChecker(var_136, 0, new int[] {2});
		final TupleMask var_138 = new TupleMask(new int[] {2, 0, 1}, 3);
		final Stub<Address<? extends Supplier>> var_139 = buildable.buildTrimmer(var_137, var_138);
		buildable.buildConnection(var_139, var_121);
		return var_121;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("lrbac.OperationObjectAssignment".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("PERM", 0);
			posMapping.put("OPE", 1);
			posMapping.put("OBJ", 2);

		}
		return posMapping;
	}
}
