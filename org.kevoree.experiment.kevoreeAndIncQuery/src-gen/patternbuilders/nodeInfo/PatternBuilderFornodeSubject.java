/*******************************************************************************
 * Pattern builder for pattern nodeInfo.nodeSubject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.nodeInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern nodeInfo.nodeSubject
 */
public class PatternBuilderFornodeSubject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("nodeInfo.nodeSubject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("nodeInfo.nodeSubject");
		
		final Address<? extends Receiver> var_208 = buildable.patternCollector("nodeInfo.nodeSubject");
		final Stub<Address<? extends Supplier>> var_209 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_210 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_211 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_210);
		final TupleMask var_212 = new TupleMask(new int[] {}, 0);
		final TupleMask var_213 = new TupleMask(new int[] {}, 2);
		final TupleMask var_214 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_215 = buildable.buildBetaNode(var_209, var_211, var_212, var_213, var_214, false);
		final Stub<Address<? extends Supplier>> var_216 = buildable.buildInjectivityChecker(var_215, 0, new int[] {1});
		final AbstractEvaluator var_217 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_218 = buildable.buildPredicateChecker(var_217, null, new int[] {1}, var_216);
		final Object var_219 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_220 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_219);
		final TupleMask var_221 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_222 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_223 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_224 = buildable.buildBetaNode(var_218, var_220, var_221, var_222, var_223, false);
		final Stub<Address<? extends Supplier>> var_225 = buildable.buildInjectivityChecker(var_224, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_226 = buildable.buildInjectivityChecker(var_225, 2, new int[] {1});
		final Object var_227 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_228 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_227);
		final TupleMask var_229 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_230 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_231 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_232 = buildable.buildBetaNode(var_226, var_228, var_229, var_230, var_231, false);
		final Stub<Address<? extends Supplier>> var_233 = buildable.buildInjectivityChecker(var_232, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_234 = buildable.buildInjectivityChecker(var_233, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_235 = buildable.buildInjectivityChecker(var_234, 3, new int[] {1});
		final TupleMask var_236 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_237 = buildable.buildTrimmer(var_235, var_236);
		buildable.buildConnection(var_237, var_208);
		return var_208;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("nodeInfo.nodeSubject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
