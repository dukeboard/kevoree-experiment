/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.subjectComponent
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.subjectComponent
 */
public class PatternBuilderForsubjectComponent implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.subjectComponent".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.subjectComponent");
		
		final Address<? extends Receiver> var_391 = buildable.patternCollector("enforcementInfo.subjectComponent");
		final Stub<Address<? extends Supplier>> var_392 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_393 = EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance");
		final Stub<Address<? extends Supplier>> var_394 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"C"}), var_393);
		final TupleMask var_395 = new TupleMask(new int[] {}, 0);
		final TupleMask var_396 = new TupleMask(new int[] {}, 1);
		final TupleMask var_397 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_398 = buildable.buildBetaNode(var_392, var_394, var_395, var_396, var_397, false);
		final Object var_399 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_400 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_399);
		final TupleMask var_401 = new TupleMask(new int[] {0}, 1);
		final TupleMask var_402 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_403 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_404 = buildable.buildBetaNode(var_398, var_400, var_401, var_402, var_403, false);
		final Stub<Address<? extends Supplier>> var_405 = buildable.buildInjectivityChecker(var_404, 0, new int[] {1});
		final Object var_406 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_407 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_406);
		final TupleMask var_408 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_409 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_410 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_411 = buildable.buildBetaNode(var_405, var_407, var_408, var_409, var_410, false);
		final Stub<Address<? extends Supplier>> var_412 = buildable.buildInjectivityChecker(var_411, 0, new int[] {2});
		final Stub<Address<? extends Supplier>> var_413 = buildable.buildInjectivityChecker(var_412, 1, new int[] {2});
		final AbstractEvaluator var_414 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(2).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_415 = buildable.buildPredicateChecker(var_414, null, new int[] {2}, var_413);
		final TupleMask var_416 = new TupleMask(new int[] {0}, 3);
		final Stub<Address<? extends Supplier>> var_417 = buildable.buildTrimmer(var_415, var_416);
		buildable.buildConnection(var_417, var_391);
		return var_391;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.subjectComponent".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);

		}
		return posMapping;
	}
}
