/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.subjectsBinded
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.subjectsBinded
 */
public class PatternBuilderForsubjectsBinded implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.subjectsBinded".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.subjectsBinded");
		
		final Address<? extends Receiver> var_300 = buildable.patternCollector("enforcementInfo.subjectsBinded");
		final Stub<Address<? extends Supplier>> var_301 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_302 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_303 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_302);
		final TupleMask var_304 = new TupleMask(new int[] {}, 0);
		final TupleMask var_305 = new TupleMask(new int[] {}, 2);
		final TupleMask var_306 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_307 = buildable.buildBetaNode(var_301, var_303, var_304, var_305, var_306, false);
		final Stub<Address<? extends Supplier>> var_308 = buildable.buildInjectivityChecker(var_307, 0, new int[] {1});
		final AbstractEvaluator var_309 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_310 = buildable.buildPredicateChecker(var_309, null, new int[] {1}, var_308);
		final Object var_311 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_312 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_311);
		final TupleMask var_313 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_314 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_315 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_316 = buildable.buildBetaNode(var_310, var_312, var_313, var_314, var_315, false);
		final Stub<Address<? extends Supplier>> var_317 = buildable.buildInjectivityChecker(var_316, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_318 = buildable.buildInjectivityChecker(var_317, 2, new int[] {1});
		final Object var_319 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ComponentInstance"))).getEStructuralFeature("required");
		final Stub<Address<? extends Supplier>> var_320 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "P"}), var_319);
		final TupleMask var_321 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_322 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_323 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_324 = buildable.buildBetaNode(var_318, var_320, var_321, var_322, var_323, false);
		final Stub<Address<? extends Supplier>> var_325 = buildable.buildInjectivityChecker(var_324, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_326 = buildable.buildInjectivityChecker(var_325, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_327 = buildable.buildInjectivityChecker(var_326, 3, new int[] {1});
		final Object var_328 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("port");
		final Stub<Address<? extends Supplier>> var_329 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "P"}), var_328);
		final TupleMask var_330 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_331 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_332 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_333 = buildable.buildBetaNode(var_327, var_329, var_330, var_331, var_332, false);
		final Stub<Address<? extends Supplier>> var_334 = buildable.buildInjectivityChecker(var_333, 4, new int[] {2});
		final Stub<Address<? extends Supplier>> var_335 = buildable.buildInjectivityChecker(var_334, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_336 = buildable.buildInjectivityChecker(var_335, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_337 = buildable.buildInjectivityChecker(var_336, 4, new int[] {1});
		final Object var_338 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("MBinding"))).getEStructuralFeature("hub");
		final Stub<Address<? extends Supplier>> var_339 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"B", "CHA"}), var_338);
		final TupleMask var_340 = new TupleMask(new int[] {4}, 5);
		final TupleMask var_341 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_342 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_343 = buildable.buildBetaNode(var_337, var_339, var_340, var_341, var_342, false);
		final Stub<Address<? extends Supplier>> var_344 = buildable.buildInjectivityChecker(var_343, 4, new int[] {5});
		final Stub<Address<? extends Supplier>> var_345 = buildable.buildInjectivityChecker(var_344, 2, new int[] {5});
		final Stub<Address<? extends Supplier>> var_346 = buildable.buildInjectivityChecker(var_345, 5, new int[] {3});
		final Stub<Address<? extends Supplier>> var_347 = buildable.buildInjectivityChecker(var_346, 5, new int[] {0});
		final Stub<Address<? extends Supplier>> var_348 = buildable.buildInjectivityChecker(var_347, 5, new int[] {1});
		final TupleMask var_349 = new TupleMask(new int[] {2}, 6);
		final Stub<Address<? extends Supplier>> var_350 = buildable.buildTrimmer(var_348, var_349);
		buildable.buildConnection(var_350, var_300);
		return var_300;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.subjectsBinded".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("C", 0);

		}
		return posMapping;
	}
}
