/*******************************************************************************
 * Pattern builder for pattern policy.OperationObjectAssignment
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policy;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policy.OperationObjectAssignment
 */
public class PatternBuilderForOperationObjectAssignment implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policy.OperationObjectAssignment".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policy.OperationObjectAssignment");
		
		final Address<? extends Receiver> var_708 = buildable.patternCollector("policy.OperationObjectAssignment");
		final Stub<Address<? extends Supplier>> var_709 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_710 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_711 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERM", "OPE"}), var_710);
		final TupleMask var_712 = new TupleMask(new int[] {}, 0);
		final TupleMask var_713 = new TupleMask(new int[] {}, 2);
		final TupleMask var_714 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_715 = buildable.buildBetaNode(var_709, var_711, var_712, var_713, var_714, false);
		final Stub<Address<? extends Supplier>> var_716 = buildable.buildInjectivityChecker(var_715, 1, new int[] {0});
		final Object var_717 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://policy/1.0").getEClassifier("Operation"))).getEStructuralFeature("objects");
		final Stub<Address<? extends Supplier>> var_718 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPE", "OBJ"}), var_717);
		final TupleMask var_719 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_720 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_721 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_722 = buildable.buildBetaNode(var_716, var_718, var_719, var_720, var_721, false);
		final Stub<Address<? extends Supplier>> var_723 = buildable.buildInjectivityChecker(var_722, 2, new int[] {1});
		final Stub<Address<? extends Supplier>> var_724 = buildable.buildInjectivityChecker(var_723, 2, new int[] {0});
		final TupleMask var_725 = new TupleMask(new int[] {0, 1, 2}, 3);
		final Stub<Address<? extends Supplier>> var_726 = buildable.buildTrimmer(var_724, var_725);
		buildable.buildConnection(var_726, var_708);
		return var_708;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policy.OperationObjectAssignment".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("PERM", 0);
			posMapping.put("OPE", 1);
			posMapping.put("OBJ", 2);

		}
		return posMapping;
	}
}
