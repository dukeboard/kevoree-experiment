/*******************************************************************************
 * Pattern builder for pattern enforcementInfo.nodeSubject
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.enforcementInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern enforcementInfo.nodeSubject
 */
public class PatternBuilderFornodeSubject implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("enforcementInfo.nodeSubject".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("enforcementInfo.nodeSubject");
		
		final Address<? extends Receiver> var_181 = buildable.patternCollector("enforcementInfo.nodeSubject");
		final Stub<Address<? extends Supplier>> var_182 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_183 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("NamedElement"))).getEStructuralFeature("name");
		final Stub<Address<? extends Supplier>> var_184 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"TYPDEF", "TYPNAME"}), var_183);
		final TupleMask var_185 = new TupleMask(new int[] {}, 0);
		final TupleMask var_186 = new TupleMask(new int[] {}, 2);
		final TupleMask var_187 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_188 = buildable.buildBetaNode(var_182, var_184, var_185, var_186, var_187, false);
		final Stub<Address<? extends Supplier>> var_189 = buildable.buildInjectivityChecker(var_188, 0, new int[] {1});
		final AbstractEvaluator var_190 = new AbstractEvaluator(){ 
			@Override 
			public Object doEvaluate(Tuple tuple) throws Exception { 
				return VPMTermEvaluator.equals(tuple.get(1).toString(),"AddressBookClient");
			}
		};
		final Stub<Address<? extends Supplier>> var_191 = buildable.buildPredicateChecker(var_190, null, new int[] {1}, var_189);
		final Object var_192 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("Instance"))).getEStructuralFeature("typeDefinition");
		final Stub<Address<? extends Supplier>> var_193 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"C", "TYPDEF"}), var_192);
		final TupleMask var_194 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_195 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_196 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_197 = buildable.buildBetaNode(var_191, var_193, var_194, var_195, var_196, false);
		final Stub<Address<? extends Supplier>> var_198 = buildable.buildInjectivityChecker(var_197, 2, new int[] {0});
		final Stub<Address<? extends Supplier>> var_199 = buildable.buildInjectivityChecker(var_198, 2, new int[] {1});
		final Object var_200 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("http://kevoree/1.0").getEClassifier("ContainerNode"))).getEStructuralFeature("components");
		final Stub<Address<? extends Supplier>> var_201 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"N", "C"}), var_200);
		final TupleMask var_202 = new TupleMask(new int[] {2}, 3);
		final TupleMask var_203 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_204 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_205 = buildable.buildBetaNode(var_199, var_201, var_202, var_203, var_204, false);
		final Stub<Address<? extends Supplier>> var_206 = buildable.buildInjectivityChecker(var_205, 2, new int[] {3});
		final Stub<Address<? extends Supplier>> var_207 = buildable.buildInjectivityChecker(var_206, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_208 = buildable.buildInjectivityChecker(var_207, 3, new int[] {1});
		final TupleMask var_209 = new TupleMask(new int[] {3}, 4);
		final Stub<Address<? extends Supplier>> var_210 = buildable.buildTrimmer(var_208, var_209);
		buildable.buildConnection(var_210, var_181);
		return var_181;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("enforcementInfo.nodeSubject".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("N", 0);

		}
		return posMapping;
	}
}
