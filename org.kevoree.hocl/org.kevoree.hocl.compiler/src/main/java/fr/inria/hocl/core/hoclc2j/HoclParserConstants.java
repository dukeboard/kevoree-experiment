/* Generated By:JavaCC: Do not edit this line. HoclParserConstants.java */
package fr.inria.hocl.core.hoclc2j;


public interface HoclParserConstants {

	int EOF = 0;

	int SINGLE_LINE_COMMENT = 8;

	int FORMAL_COMMENT = 9;

	int MULTI_LINE_COMMENT = 10;

	int ABSTRACT = 12;

	int ASSERT = 13;

	int BOOLEAN = 14;

	int BREAK = 15;

	int BYTE = 16;

	int CASE = 17;

	int CATCH = 18;

	int CHAR = 19;

	int CLASS = 20;

	int CONST = 21;

	int CONTINUE = 22;

	int _DEFAULT = 23;

	int DO = 24;

	int DOUBLE = 25;

	int ELSE = 26;

	int ENUM = 27;

	int EXTENDS = 28;

	int FALSE = 29;

	int FINAL = 30;

	int FINALLY = 31;

	int FLOAT = 32;

	int FOR = 33;

	int GOTO = 34;

	int IF = 35;

	int IMPLEMENTS = 36;

	int IMPORT = 37;

	int INSTANCEOF = 38;

	int INT = 39;

	int INTERFACE = 40;

	int LONG = 41;

	int NATIVE = 42;

	int NEW = 43;

	int NULL = 44;

	int PACKAGE = 45;

	int PRIVATE = 46;

	int PROTECTED = 47;

	int PUBLIC = 48;

	int RETURN = 49;

	int SHORT = 50;

	int STATIC = 51;

	int STRICTFP = 52;

	int SUPER = 53;

	int SWITCH = 54;

	int SYNCHRONIZED = 55;

	int THIS = 56;

	int THROW = 57;

	int THROWS = 58;

	int TRANSIENT = 59;

	int TRUE = 60;

	int TRY = 61;

	int VOID = 62;

	int VOLATILE = 63;

	int WHILE = 64;

	int INTEGER_LITERAL = 65;

	int DECIMAL_LITERAL = 66;

	int HEX_LITERAL = 67;

	int OCTAL_LITERAL = 68;

	int FLOATING_POINT_LITERAL = 69;

	int DECIMAL_FLOATING_POINT_LITERAL = 70;

	int DECIMAL_EXPONENT = 71;

	int HEXADECIMAL_FLOATING_POINT_LITERAL = 72;

	int HEXADECIMAL_EXPONENT = 73;

	int CHARACTER_LITERAL = 74;

	int STRING_LITERAL = 75;

	int REPLACE = 76;

	int BY = 77;

	int REPLACE_ONE = 78;

	int LET = 79;

	int IN = 80;

	int ERROR = 81;

	int REC = 82;

	int TWO_COLONS = 83;

	int IDENTIFIER = 84;

	int LETTER = 85;

	int PART_LETTER = 86;

	int LPAREN = 87;

	int RPAREN = 88;

	int LBRACE = 89;

	int RBRACE = 90;

	int LBRACKET = 91;

	int RBRACKET = 92;

	int SEMICOLON = 93;

	int COMMA = 94;

	int DOT = 95;

	int AT = 96;

	int ASSIGN = 97;

	int LT = 98;

	int BANG = 99;

	int TILDE = 100;

	int HOOK = 101;

	int COLON = 102;

	int EQ = 103;

	int LE = 104;

	int GE = 105;

	int NE = 106;

	int SC_OR = 107;

	int SC_AND = 108;

	int INCR = 109;

	int DECR = 110;

	int PLUS = 111;

	int MINUS = 112;

	int STAR = 113;

	int SLASH = 114;

	int BIT_AND = 115;

	int BIT_OR = 116;

	int XOR = 117;

	int REM = 118;

	int GT = 119;

	int DEFAULT = 0;

	int IN_FORMAL_COMMENT = 1;

	int IN_MULTI_LINE_COMMENT = 2;

	String[] tokenImage = { "<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"",
			"\"\\f\"", "<token of kind 6>", "\"/*\"", "<SINGLE_LINE_COMMENT>",
			"\"*/\"", "\"*/\"", "<token of kind 11>", "\"abstract\"", "\"assert\"",
			"\"boolean\"", "\"break\"", "\"byte\"", "\"case\"", "\"catch\"",
			"\"char\"", "\"class\"", "\"const\"", "\"continue\"", "\"default\"",
			"\"do\"", "\"double\"", "\"else\"", "\"enum\"", "\"extends\"",
			"\"false\"", "\"final\"", "\"finally\"", "\"float\"", "\"for\"",
			"\"goto\"", "\"if\"", "\"implements\"", "\"import\"", "\"instanceof\"",
			"\"int\"", "\"interface\"", "\"long\"", "\"native\"", "\"new\"",
			"\"null\"", "\"package\"", "\"private\"", "\"protected\"", "\"public\"",
			"\"return\"", "\"short\"", "\"static\"", "\"strictfp\"", "\"super\"",
			"\"switch\"", "\"synchronized\"", "\"this\"", "\"throw\"", "\"throws\"",
			"\"transient\"", "\"true\"", "\"try\"", "\"void\"", "\"volatile\"",
			"\"while\"", "<INTEGER_LITERAL>", "<DECIMAL_LITERAL>", "<HEX_LITERAL>",
			"<OCTAL_LITERAL>", "<FLOATING_POINT_LITERAL>",
			"<DECIMAL_FLOATING_POINT_LITERAL>", "<DECIMAL_EXPONENT>",
			"<HEXADECIMAL_FLOATING_POINT_LITERAL>", "<HEXADECIMAL_EXPONENT>",
			"<CHARACTER_LITERAL>", "<STRING_LITERAL>", "\"replace\"", "\"by\"",
			"\"replace-one\"", "\"let\"", "\"in\"", "\"ERROR\"", "\"rec\"", "\"::\"",
			"<IDENTIFIER>", "<LETTER>", "<PART_LETTER>", "\"(\"", "\")\"", "\"{\"",
			"\"}\"", "\"[\"", "\"]\"", "\";\"", "\",\"", "\".\"", "\"@\"", "\"=\"",
			"\"<\"", "\"!\"", "\"~\"", "\"?\"", "\":\"", "\"==\"", "\"<=\"",
			"\">=\"", "\"!=\"", "\"||\"", "\"&&\"", "\"++\"", "\"--\"", "\"+\"",
			"\"-\"", "\"*\"", "\"/\"", "\"&\"", "\"|\"", "\"^\"", "\"%\"", "\">\"",
			"\"*=\"", "\"/=\"", "\"%=\"", "\"+=\"", "\"-=\"", "\"<<=\"", "\">>=\"",
			"\">>>=\"", "\"&=\"", "\"^=\"", "\"|=\"", };

}
