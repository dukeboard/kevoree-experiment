/*******************************************************************************
 * Pattern builder for pattern lrbac.user
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.lrbac;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern lrbac.user
 */
public class PatternBuilderForuser implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("lrbac.user".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("lrbac.user");
		
		final Address<? extends Receiver> var_78 = buildable.patternCollector("lrbac.user");
		final Stub<Address<? extends Supplier>> var_79 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_80 = EPackage.Registry.INSTANCE.getEPackage("http://lrbac/1.0").getEClassifier("User");
		final Stub<Address<? extends Supplier>> var_81 = buildable.unaryTypeStub(new FlatTuple(new Object[] {"U"}), var_80);
		final TupleMask var_82 = new TupleMask(new int[] {}, 0);
		final TupleMask var_83 = new TupleMask(new int[] {}, 1);
		final TupleMask var_84 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_85 = buildable.buildBetaNode(var_79, var_81, var_82, var_83, var_84, false);
		final TupleMask var_86 = new TupleMask(new int[] {0}, 1);
		final Stub<Address<? extends Supplier>> var_87 = buildable.buildTrimmer(var_85, var_86);
		buildable.buildConnection(var_87, var_78);
		return var_78;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("lrbac.user".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("U", 0);

		}
		return posMapping;
	}
}
