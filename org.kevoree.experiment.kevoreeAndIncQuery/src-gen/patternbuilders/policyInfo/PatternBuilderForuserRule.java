/*******************************************************************************
 * Pattern builder for pattern policyInfo.userRule
 * Generated by EMF-IncQuery
 * Should contribute a pattern-builder to extension point
 * org.eclipse.viatra2.emf.incquery.codegen.patternmatcher.builder 
 *******************************************************************************/

package patternbuilders.policyInfo;

import java.util.HashMap;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.viatra2.emf.incquery.runtime.IStatelessGeneratedRetePatternBuilder;
import org.eclipse.viatra2.emf.incquery.runtime.term.VPMTermEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.boundary.AbstractEvaluator;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.ReteContainerBuildable;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.RetePatternBuildException;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.construction.Stub;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.matcher.IPatternMatcherContext;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Receiver;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.network.Supplier;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.remote.Address;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.FlatTuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.Tuple;
import org.eclipse.viatra2.gtasm.patternmatcher.incremental.rete.tuple.TupleMask;

/**
 * Generated automatically from pattern policyInfo.userRule
 */
public class PatternBuilderForuserRule implements IStatelessGeneratedRetePatternBuilder {
	@Override
	public Address<? extends Receiver> construct(
			ReteContainerBuildable<String> buildable,
			IPatternMatcherContext<String> context, String gtPattern)
			throws RetePatternBuildException {
		assert("policyInfo.userRule".equals(gtPattern));
		buildable = buildable.getNextContainer().putOnTab("policyInfo.userRule");
		
		final Address<? extends Receiver> var_549 = buildable.patternCollector("policyInfo.userRule");
		final Stub<Address<? extends Supplier>> var_550 = buildable.buildStartStub(new Object[] {}, new Object[] {});
		final Object var_551 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Role"))).getEStructuralFeature("permissions");
		final Stub<Address<? extends Supplier>> var_552 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"ROLE", "PERMISSION"}), var_551);
		final TupleMask var_553 = new TupleMask(new int[] {}, 0);
		final TupleMask var_554 = new TupleMask(new int[] {}, 2);
		final TupleMask var_555 = new TupleMask(new int[] {0, 1}, 2);
		final Stub<Address<? extends Supplier>> var_556 = buildable.buildBetaNode(var_550, var_552, var_553, var_554, var_555, false);
		final Stub<Address<? extends Supplier>> var_557 = buildable.buildInjectivityChecker(var_556, 1, new int[] {0});
		final Object var_558 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("User"))).getEStructuralFeature("assignedRoles");
		final Stub<Address<? extends Supplier>> var_559 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"USER", "ROLE"}), var_558);
		final TupleMask var_560 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_561 = new TupleMask(new int[] {1}, 2);
		final TupleMask var_562 = new TupleMask(new int[] {0}, 2);
		final Stub<Address<? extends Supplier>> var_563 = buildable.buildBetaNode(var_557, var_559, var_560, var_561, var_562, false);
		final Stub<Address<? extends Supplier>> var_564 = buildable.buildInjectivityChecker(var_563, 1, new int[] {2});
		final Stub<Address<? extends Supplier>> var_565 = buildable.buildInjectivityChecker(var_564, 0, new int[] {2});
		final Object var_566 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Permission"))).getEStructuralFeature("operations");
		final Stub<Address<? extends Supplier>> var_567 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"PERMISSION", "OPERATION"}), var_566);
		final TupleMask var_568 = new TupleMask(new int[] {1}, 3);
		final TupleMask var_569 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_570 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_571 = buildable.buildBetaNode(var_565, var_567, var_568, var_569, var_570, false);
		final Stub<Address<? extends Supplier>> var_572 = buildable.buildInjectivityChecker(var_571, 3, new int[] {1});
		final Stub<Address<? extends Supplier>> var_573 = buildable.buildInjectivityChecker(var_572, 3, new int[] {0});
		final Stub<Address<? extends Supplier>> var_574 = buildable.buildInjectivityChecker(var_573, 3, new int[] {2});
		final Object var_575 = ((EClass) (EPackage.Registry.INSTANCE.getEPackage("rbac.rbac").getEClassifier("Operation"))).getEStructuralFeature("resources");
		final Stub<Address<? extends Supplier>> var_576 = buildable.binaryEdgeTypeStub(new FlatTuple(new Object[] {"OPERATION", "OBJECT"}), var_575);
		final TupleMask var_577 = new TupleMask(new int[] {3}, 4);
		final TupleMask var_578 = new TupleMask(new int[] {0}, 2);
		final TupleMask var_579 = new TupleMask(new int[] {1}, 2);
		final Stub<Address<? extends Supplier>> var_580 = buildable.buildBetaNode(var_574, var_576, var_577, var_578, var_579, false);
		final Stub<Address<? extends Supplier>> var_581 = buildable.buildInjectivityChecker(var_580, 4, new int[] {3});
		final Stub<Address<? extends Supplier>> var_582 = buildable.buildInjectivityChecker(var_581, 4, new int[] {1});
		final Stub<Address<? extends Supplier>> var_583 = buildable.buildInjectivityChecker(var_582, 4, new int[] {0});
		final Stub<Address<? extends Supplier>> var_584 = buildable.buildInjectivityChecker(var_583, 4, new int[] {2});
		final TupleMask var_585 = new TupleMask(new int[] {2, 3, 4}, 5);
		final Stub<Address<? extends Supplier>> var_586 = buildable.buildTrimmer(var_584, var_585);
		buildable.buildConnection(var_586, var_549);
		return var_549;

	}
	
	HashMap<Object, Integer> posMapping;
	@Override
	public HashMap<Object, Integer> getPosMapping(String gtPattern) {
		assert("policyInfo.userRule".equals(gtPattern));
		if (posMapping == null) {
			posMapping = new HashMap<Object, Integer>();
			
			posMapping.put("USER", 0);
			posMapping.put("OPERATION", 1);
			posMapping.put("OBJECT", 2);

		}
		return posMapping;
	}
}
